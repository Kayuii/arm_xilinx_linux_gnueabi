+q  // Enter quiet mode
//___________________________________________________________________
//
//               Copyright (c) 2011 Mentor Graphics Corporation
//                           All rights reserved
//
//   THIS WORK CONTAINS TRADE SECRETS AND PROPRIETARY INFORMATION WHICH IS
//    THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS
//                        SUBJECT TO LICENSE TERMS.
//
//___________________________________________________________________
//
// Mentor Embedded Sourcery Probe target initialization file for the
// AT91SAM9260-EK Rev B reference platform.  It supports this platform as-is,
// and can be adapted to a new target based on this reference board,
// as detailed below.  For a brand new custom board not related to
// this reference board, it may be better to start from the template
// rather than trying to adapt this file.
//
// Target Description:
//
//     Board:   Atmel AT91SAM9260-EK Rev B Reference Platform
//     Device:  Atmel AT91SAM9260
//     CPU ID:  ARM926EJS
//     Endian:  Little
//     Cores:   1
//
// Porting Guide:
//
// The user should make the following adaptations to port this file
// to a new target board based on the associated reference platform:
//
//        0. Review the MEP Probe Initialization section at
//           "TO DO #0" below to make sure the settings are
//           right for your board.
//        1. Update the memory configuration table for changes
//           in the new board's  *Physical*  memory map.  See
//           'TO DO #1' below.
//        2. If your target board requires any special MEP
//           settings, they should be added to the end of the
//           ONE_TIME_SETUP section.  See 'TO DO #2' below.
//        3. Decide whether the target should be automatically
//           reset and/or initialized upon start-up by choosing
//           the desired command at 'TO DO #3' below.  This
//           really depends on your use case.
//        4. If the board has no boot code (or bad boot code),
//           and you want to download into RAM, then you may
//           have to adapt the memory controller initialization
//           script at 'TO DO #4' below to account for changes
//           relative to the reference platform.
//
// NOTE:  Additional information on MON commands and the configuration
//        options used here is available in the online help system.
//___________________________________________________________________
dv "Reading $$# ...\n"


// Initialization script preparation
// =================================

// The RTI, RTNI, and TI command aliases call script functions in this file.
// These command aliases should never be changed.

ea RTI   $$#.DO_RTI  // RTI  call DO_RTI script function  (Reset Target and Initialize)
ea RTNI  $$#.DO_RTNI // RTNI call DO_RTNI script function (Reset Target with No Initialization)
ea TI    $$#.DO_TI   // TI   call DO_TI script function   (Target Initialize without resetting)


// MEP Probe Initialization
// ==========================

// TO DO #0 -- Review the following MEP configuration options to make
//             sure they are right for your target board hardware and
//             processor device design.

// The  Trgt_Resets_JTAG  option informs the MEP probe whether the target
// board will forward a system reset (nSRST) to the JTAG interface (nTRST),
// or reset the system only without resetting the JTAG interface.  When in
// doubt, a YES setting is safer.  When the two reset circuits are known
// to be independent, which is strongly recommended, then a NO setting is
// recommended.

eo Trgt_Resets_JTAG  = yes

// The  Ice_JTAG_Use_RTCLK  and  Ice_JTAG_Clock_Freq  options are related
// and must be considered together.  An  Ice_JTAG_Use_RTCLK  setting of
// ON  selects adaptive clocking mode, where the JTAG clock is dynamically
// controlled by the target processor.  When  Ice_JTAG_Use_RTCLK  is set
// OFF  then normal (unthrottled) clocking is selected.
//
// When adaptive clocking is disabled, the  Ice_JTAG_Clock_Freq  option
// specifies the the JTAG clock (TCK) frequency in Megahertz, from
// 0.002 to 100 (depending on probe hardware capability).  A lower setting
// is safer, a higher setting yields higher performance.  Note that the
// requested frequency will be adjusted down to the closest frequency
// supported by the probe hardware (displaying this option will show the
// actual TCK frequency).
//
//     IJUR  Clock mode
//     ====  ========================
//     OFF   Free running TCK at specified frequency (RTCK is ignored)
//     ON    Adaptive clocking with frequency controlled by RTCK
//           (Ice_JTAG_Clock_Freq is ignored)
//
// Note that enabling  Ice_JTAG_Use_RTCLK  on target boards that do not
// drive the RTCK signal will lock up the JTAG interface.

eo Ice_JTAG_Use_RTCLK  = on
eo Ice_JTAG_Clock_Freq = 10
if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

// The following command can be used to define the details of the JTAG
// daisy chain.  It is only required for targets on which the MEP
// auto-detection algorithm cannot correctly determine the JTAG connection
// details.  On most boards this command can be omitted.
//
//    ew MEP_JTAG_DIMENSION = TAP_CNT, IR1_CNT [ , IR2_CNT ]  ...

// The following commands can be used to define special JTAG initialization
// operations required by certain processors.  The first one, if defined,
// is scanned in right after the JTAG reset cycle completes, but before the
// standard JTAG initialization performed by the MEP.  The second, if
// defined, is scanned in right after the standard JTAG initialization
// performed by the MEP.  On most boards these can both be omitted.
//
//    ew MEP_JTAG_INIT0 = <scan-op> [ , <scan-op> ]  ...
//    ew MEP_JTAG_INIT1 = <scan-op> [ , <scan-op> ]  ...

// The  Ice_Power_Sense  option enables the target power monitor.  When
// target power is detected, the debug interface is enabled.

eo Ice_Power_Sense = VREF

// The  Ice_JTAG_TAP_Select  option controls which TAP on a multi-TAP
// daisy chain is associated with this debug connection.  This option
// can be omitted on targets which have one TAP.  Note that TAPs are
// numbered from 1-N, with TAP 1 being the one whose TDO is connected
// to the MEP probe.
//
//    eo Ice_JTAG_TAP_Select = <num>

// Physical Memory Configuration
// =============================

mc *:P, inv     // start with all *physical* memory (*:P) marked as invalid

// TO DO #1 -- Change the address range(s) below to match the  *physical*
//             address ranges of your ROM/flash and RAM areas.  Add more
//             MC commands as necessary for each memory mapped area.
//
// WARNING:  DO NOT confuse virtual (MVA) addresses with physical space.
//           Make sure to use physical addresses in the MC table.
//
// EXAMPLE:
//
//     mc  ________:P  ________:P,  PWE, JAM, RW    // DRAM
//     mc  ________:P  ________:P,  PWD, JAM, RO    // Flash or ROM
//     mc  ________:P  ________:P,  PWD, JAM, RW    // Peripheral registers
//
// Note that if your boot code remaps physical memory, then the MC table
// should reflect the mapping that is in effect for the code you are trying
// to debug.  When debugging boot code in flash, MC should match the mapping
// in effect when booting.  When debugging code in RAM, MC should match the
// mapping in effect when running code from RAM.
//
// Address Range          PWE  Access
// ---------------------- ---- -------
mc 0x00000000:P 0x000FFFFF:P, PWD, JAM, RW	// Internal Boot Memory
mc 0x00100000:P 0x00107FFF:P, PWD, JAM, RO	// Internal ROM
mc 0x00200000:P 0x00200FFF:P, PWE, JAM, RW	// Internal SRAM0
mc 0x00300000:P 0x00300FFF:P, PWE, JAM, RW	// Internal SRAM1
mc 0x00500000:P 0x00503FFF:P, PWD, JAM, RW	// Internal UHP
mc 0x10000000:P 0x1FFFFFFF:P, PWD, JAM, RW	// EBI Chip Select 0
mc 0x20000000:P 0x2FFFFFFF:P, PWE, JAM, RW	// SDRAMC - EBI Chip Select 1
mc 0x30000000:P 0x3FFFFFFF:P, PWD, JAM, RW	// EBI Chip Select 2
mc 0x40000000:P 0x4FFFFFFF:P, PWD, JAM, RW	// NAND Flash - EBI Chip Select 3
mc 0x50000000:P 0x5FFFFFFF:P, PWD, JAM, RW	// Compact Flash Slot 0 - EBI Chip Select 4
mc 0x60000000:P 0x6FFFFFFF:P, PWD, JAM, RW	// Compact Flash Slot 1 - EBI Chip Select 5
mc 0x70000000:P 0x7FFFFFFF:P, PWD, JAM, RW	// EBI Chip Select 6
mc 0x80000000:P 0x8FFFFFFF:P, PWD, JAM, RW	// EBI Chip Select 7
mc 0xFFFA0000:P 0xFFFA3FFF:P, PWD, JAM, RW	// TC0, TC1, TC2
mc 0xFFFA4000:P 0xFFFA7FFF:P, PWD, JAM, RW	// UDP
mc 0xFFFA8000:P 0xFFFABFFF:P, PWD, JAM, RW	// MCI
mc 0xFFFAC000:P 0xFFFAFFFF:P, PWD, JAM, RW	// TWI
mc 0xFFFB0000:P 0xFFFB3FFF:P, PWD, JAM, RW	// USART0
mc 0xFFFB4000:P 0xFFFB7FFF:P, PWD, JAM, RW	// USART1
mc 0xFFFB8000:P 0xFFFBBFFF:P, PWD, JAM, RW	// USART2
mc 0xFFFBC000:P 0xFFFBFFFF:P, PWD, JAM, RW	// SSC
mc 0xFFFC0000:P 0xFFFC3FFF:P, PWD, JAM, RW	// ISI
mc 0xFFFC4000:P 0xFFFC7FFF:P, PWD, JAM, RW	// EMAC
mc 0xFFFC8000:P 0xFFFCBFFF:P, PWD, JAM, RW	// SPI0
mc 0xFFFCC000:P 0xFFFCFFFF:P, PWD, JAM, RW	// SPI1
mc 0xFFFD0000:P 0xFFFD3FFF:P, PWD, JAM, RW	// USART3
mc 0xFFFD4000:P 0xFFFD7FFF:P, PWD, JAM, RW	// USART4
mc 0xFFFD8000:P 0xFFFDBFFF:P, PWD, JAM, RW	// USART5
mc 0xFFFDC000:P 0xFFFDFFFF:P, PWD, JAM, RW	// TC3, TC4, TC5
mc 0xFFFE0000:P 0xFFFE3FFF:P, PWD, JAM, RW	// ADC
mc 0xFFFFE800:P 0xFFFFE9FF:P, PWD, JAM, RW	// ECC
mc 0xFFFFEA00:P 0xFFFFEBFF:P, PWD, JAM, RW	// SDRAMC
mc 0xFFFFEC00:P 0xFFFFEDFF:P, PWD, JAM, RW	// SMC
mc 0xFFFFEE00:P 0xFFFFEF0F:P, PWD, JAM, RW	// MATRIX
mc 0xFFFFEF10:P 0xFFFFEFFF:P, PWD, JAM, RW	// CFG
mc 0xFFFFF000:P 0xFFFFF1FF:P, PWD, JAM, RW	// AIC
mc 0xFFFFF200:P 0xFFFFF3FF:P, PWD, JAM, RW	// DBGU
mc 0xFFFFF400:P 0xFFFFF5FF:P, PWD, JAM, RW	// PIOA
mc 0xFFFFF600:P 0xFFFFF7FF:P, PWD, JAM, RW	// PIOB
mc 0xFFFFF800:P 0xFFFFF9FF:P, PWD, JAM, RW	// PIOC
mc 0xFFFFFC00:P 0xFFFFFCFF:P, PWD, JAM, RW	// PMC
mc 0xFFFFFD00:P 0xFFFFFD0F:P, PWD, JAM, RW	// RSTC
mc 0xFFFFFD10:P 0xFFFFFD1F:P, PWD, JAM, RW	// SHDWC
mc 0xFFFFFD20:P 0xFFFFFD2F:P, PWD, JAM, RW	// RTTC
mc 0xFFFFFD30:P 0xFFFFFD3F:P, PWD, JAM, RW	// PITC
mc 0xFFFFFD40:P 0xFFFFFD4F:P, PWD, JAM, RW	// WDTC
mc 0xFFFFFD50:P 0xFFFFFD9F:P, PWD, JAM, RW	// GPBR

// This mapping above assumes a REMAP is set.  See section 7.1 Embedded Memories 
// of the AT91SAM9260 microcontroller manual (doc6221)

//        ____User Supplied Setup Commands Go Here____

// TO DO #2 -- If your target board requires any special MEP settings
//             (e.g. special JTAG initialization), add the commands to
//             make those settings here.


// End of initial one-time only setup script.  If this is a non-intrusive
// attach connection, or if a normal debug connection fails to connect
// properly, then exit at this point.  Otherwise continue on with optional
// additional initialization.

if (@.4$INIT_TYPE != 0) {dv "Non-intrusive attach connection\n"; goto EXIT}
if (@$trgt_cpu_state != $tcs.halt) {dv "Debug connection failed, "; doq TCS; goto EXIT}

// TO DO #3 -- Comment out all but one of the next three commands to
//             control IF and HOW the target is initialized when the
//             debugger is launched.  If no reset or target initialization
//             is needed then all these can be left commented out.

//   TI
RTI
//   RTNI

:EXIT
dv "Finished reading $$#.\n"
return

//___________________________________________________________________
::DO_RTNI  // Reset Target with No Initialization.

    // Normally an  rt  command is sufficient, but it may be necessary
    // to slow down the JTAG clock first, depending on the affect of
    // reset on the processor.

    dv "Executing RTNI script function\n"
    rt
    return

//___________________________________________________________________
::DO_RTI   // Reset Target and Initialize.

    // Note that it may be necessary to slow down the JTAG clock first, 
    // depending on the affect of reset on the processor.

    dv "Executing RTI script function\n"
    rt
    TI	// call script DO_TI function
    return

//___________________________________________________________________
::DO_TI  // Target Initialize.

    if (@$trgt_cpu_state != $tcs.halt) { dv "Target Initialization commands skipped due to CPU state\n"; doq TCS; return }
    dv "Initializing target...\n"

    //  Memory Controller Setup
    //
    // TO DO #4 -- If your board has a different memory configuration than
    //             the reference board, then you may need to adapt the
    //             memory controller initialization script accordingly.
    //             These settings should match the settings used by your
    //             boot code during its hardware initialization phase.

    // Write PMC Clock Generator Main Oscillator Register
    ew PMC_MOR = 0x00000001

    // Write PMC Master Clock Register to select main clock
    ew PMC_MCKR = 0x00000000

    // Write to PLLAR Register
    ew PLLAR_REG = 0x2060BF09
    w 10

    // Write to PLLBR Register
    ew PLLBR_REG = 0x10483F0E

    // Write to MCK Register to use PLLA for Master clock and PLLA*2 for Processor clock
    ew PMC_MCKR = 0x00000102

    // Bump the clock back up to normal operating speed
    // Doing so greatly speeds up the reset of the operations below
    eo ice_jtag_clock_freq = 25
    if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

    // Disable Watchdog timer.
    ew WDTC_WDMR = 0x00008000

    // Initialize Matrix
    ew FFFFEF1C = @.40xFFFFEF1C | 0x00000002
    ew FFFFEF00 = 0x00000003

    // Performs the hardware initialization
    ew PIOCA = 0xFFFF0000

    ew PIOCB = 0x00000000
    ew PIOC_DIS = 0xFFFF0000

    // CFG Control Register
    ew FFFFEA08 = 0x85227259

    ew FFFFEA00 = 2
    ew 20000000 = 0

    ew FFFFEA00 = 4
    ew 20000004 = 1

    ew FFFFEA00 = 4
    ew 20000008 = 2

    ew FFFFEA00 = 4
    ew 2000000c = 3

    ew FFFFEA00 = 4
    ew 20000010 = 4

    ew FFFFEA00 = 4
    ew 20000014 = 5

    ew FFFFEA00 = 4
    ew 20000018 = 6

    ew FFFFEA00 = 4
    ew 2000001c = 7

    ew FFFFEA00 = 4
    ew 20000020 = 8

    // Set LMR operation Perform LMR burst=1, lat=2
    ew FFFFEA00 = 3
    ew 20000024 = 0x0cafedede

    // Set Refresh Timer
    ew FFFFEA04 = 0x2B7

    // Set Normal mode
    ew FFFFEA00 = 0
    ew 20000000 = 0

    ew PMC_PCER = @.4PMC_PCER | 0x00200000

    ew PIOA_PUDR = 0x003FF000

    ew PIOAA = 0x003DF000
    ew PIOA_DIS = 0x003FF000

    ew RSTMOD  = 0xA5000D00
    ew RSTCTRL = 0xA5000008

    ew PMC_PCER = @.4PMC_PCER & 0xFFDFFFF

    dv "Initializing target done.\n"
    return

//___________________________________________________________________

// <eof>
