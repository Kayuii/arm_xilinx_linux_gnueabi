+q  // Enter quiet mode
//___________________________________________________________________
//
//               Copyright (c) 2011 Mentor Graphics Corporation
//                           All rights reserved
//
//   THIS WORK CONTAINS TRADE SECRETS AND PROPRIETARY INFORMATION WHICH IS
//    THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS
//                        SUBJECT TO LICENSE TERMS.
//
//___________________________________________________________________
//
// Mentor Embedded Sourcery Probe target initialization file for the
// Freescale i.MX51 evaluation kit reference platform.  It supports this platform as-is,
// and can be adapted to a new target based on this reference board,
// as detailed below.  For a brand new custom board not related to
// this reference board, it may be better to start from the template
// rather than trying to adapt this file.
//
// Target Description :
//
//     Board:   Freescale i.MX51 EVK
//     Device:  Freescale i.MX51 (MCIMX515DJM8C)
//     CPU ID:  Cortex-A8
//     Endian:  Little
//     Cores:   1
//
// Porting Guide:
//
// The user should make the following adaptations to port this file
// to a new target board based on the associated reference platform:
//
//        0. Review the MEP Probe Initialization section at
//           "TO DO #0" below to make sure the settings are
//           right for your board.
//        1. Update the memory configuration table for changes
//           in the new board's  *Physical*  memory map.  See
//           'TO DO #1' below.
//        2. If your target board requires any special MEP
//           settings, they should be added to the end of the
//           ONE_TIME_SETUP section.  See 'TO DO #2' below.
//        3. Decide whether the target should be automatically
//           reset and/or initialized upon start-up by choosing
//           the desired command at 'TO DO #3' below.  This
//           really depends on your use case.
//        4. If the board has no boot code (or bad boot code),
//           and you want to download into RAM, then you may
//           have to adapt the memory controller initialization
//           script at 'TO DO #4' below to account for changes
//           relative to the reference platform.
//
// NOTE:  Additional information on MON commands and the configuration
//        options used here is available in the online help system.
//___________________________________________________________________
//
//Boot mode is set to “Bootstrap” with the following switch settings 
//(Please find "S1" on the board which has 10 DIP switches)
//
//SW 1 and 2 => ON 
//SW 3, 4, 5 and 6 => OFF
//SW 7 and 8 => ON
//SW 9 => OFF
//SW 0 => ON
//

dv "Reading $$# ...\n"

// Initialization script preparation
// =================================

// The RTI, RTNI, and TI command aliases call script functions in this file.
// These command aliases should never be changed.

ea RTI   $$#.DO_RTI  // RTI  call DO_RTI script function  (Reset Target and Initialize)
ea RTNI  $$#.DO_RTNI // RTNI call DO_RTNI script function (Reset Target with No Initialization)
ea TI    $$#.DO_TI   // TI   call DO_TI script function   (Target Initialize without resetting)


// MEP Probe Initialization
// ==========================

// TO DO #0 -- Review the following MEP configuration options to make
//             sure they are right for your target board hardware and
//             processor device design.

// The  Trgt_Resets_JTAG  option informs the MEP probe whether the target
// board will forward a system reset (nSRST) to the JTAG interface (nTRST),
// or reset the system only without resetting the JTAG interface.  When in
// doubt, a YES setting is safer.  When the two reset circuits are known
// to be independent, which is strongly recommended, then a NO setting is
// recommended.

eo Trgt_Resets_JTAG  = no

// The  Ice_JTAG_Use_RTCLK  and  Ice_JTAG_Clock_Freq  options are related
// and must be considered together.  An  Ice_JTAG_Use_RTCLK  setting of
// ON  selects adaptive clocking mode, where the JTAG clock is dynamically
// controlled by the target processor.  When  Ice_JTAG_Use_RTCLK  is set
// OFF  then normal (unthrottled) clocking is selected.
//
// When adaptive clocking is disabled, the  Ice_JTAG_Clock_Freq  option
// specifies the the JTAG clock (TCK) frequency in Megahertz, from
// 0.002 to 100 (depending on probe hardware capability).  A lower setting
// is safer, a higher setting yields higher performance.  Note that the
// requested frequency will be adjusted down to the closest frequency
// supported by the probe hardware (displaying this option will show the
// actual TCK frequency).
//
//     IJUR  Clock mode
//     ====  ========================
//     OFF   Free running TCK at specified frequency (RTCK is ignored)
//     ON    Adaptive clocking with frequency controlled by RTCK
//           (Ice_JTAG_Clock_Freq is ignored)
//
// Note that enabling  Ice_JTAG_Use_RTCLK  on target boards that do not
// drive the RTCK signal will lock up the JTAG interface.

eo Ice_JTAG_Use_RTCLK  = off
eo Ice_JTAG_Clock_Freq = 10
if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

// The following command can be used to define the details of the JTAG
// daisy chain.  It is only required for targets on which the MEP
// auto-detection algorithm cannot correctly determine the JTAG connection
// details.  On most boards this command can be omitted.
//
//    ew MEP_JTAG_DIMENSION = TAP_CNT, IR1_CNT [ , IR2_CNT ]  ...

ew MEP_JTAG_DIMENSION = 3,4,4,5 // ARMCS-DP (IR len=4), SDMA (IR len=4), SJC (IR len=5)

// The ice_jtag_scan_freeze option controls how the JTAG state machine
// waits when a scan operation suspends upon completion instead of
// returning to RT/Idle.  When ice_jtag_scan_freeze is on, it waits by
// remaining in IR/Scan or DR/Scan state while freezing TCK instead of
// visiting IR/Pause and DR/Pause states.

eo ice_jtag_scan_freeze = on

// The following commands can be used to define special JTAG initialization
// operations required by certain processors.  The first one, if defined,
// is scanned in right after the JTAG reset cycle completes, but before the
// standard JTAG initialization performed by the MEP.  The second, if
// defined, is scanned in right after the standard JTAG initialization
// performed by the MEP.  On most boards these can both be omitted.
//
//    ew MEP_JTAG_INIT0 = <scan-op> [ , <scan-op> ]  ...
//    ew MEP_JTAG_INIT1 = <scan-op> [ , <scan-op> ]  ...

// Override wrongly reported ROM table base address 
ew CSAP1_BASE = 0x60000000 

// The  Ice_Power_Sense  option enables the target power monitor.  When
// target power is detected, the debug interface is enabled.

eo Ice_Power_Sense = VREF

// The  Ice_JTAG_TAP_Select  option controls which TAP on a multi-TAP
// daisy chain is associated with this debug connection.  This option
// can be omitted on targets which have one TAP.  Note that TAPs are
// numbered from 1-N, with TAP 1 being the one whose TDO is connected
// to the MEP probe.

eo Ice_JTAG_TAP_Select = 1

// Physical Memory Configuration
// =============================

mc *:P, inv     // start with all *physical* memory (*:P) marked as invalid

// TO DO #1 -- Change the address range(s) below to match the  *physical*
//             address ranges of your ROM/flash and RAM areas.  Add more
//             MC commands as necessary for each memory mapped area.
//
// WARNING:  DO NOT confuse virtual (MVA) addresses with physical space.
//           Make sure to use physical addresses in the MC table.
//
// EXAMPLE:
//
//     mc  ________:P  ________:P,  PWE, JAM, RW    // DRAM
//     mc  ________:P  ________:P,  PWD, JAM, RO    // Flash or ROM
//     mc  ________:P  ________:P,  PWD, JAM, RW    // Peripheral registers
//
// Note that if your boot code remaps physical memory, then the MC table
// should reflect the mapping that is in effect for the code you are trying
// to debug.  When debugging boot code in flash, MC should match the mapping
// in effect when booting.  When debugging code in RAM, MC should match the
// mapping in effect when running code from RAM.
//
// Address Range          PWE  Access
// ---------------------- ---- -------
mc 0x00000000:P 0x00008FFF:P, PWD, JAM, RO // 36K Boot ROM
mc 0x1FFE0000:P 0x1FFFFFFF:P, PWD, DMA, RW // 128K SCC RAM
mc 0x73F84000:P 0x73F87FFF:P, PWD, JAM, RW // 16K GPIO1
mc 0x73F88000:P 0x73F8BFFF:P, PWD, JAM, RW // 16K GPIO2
mc 0x73F8C000:P 0x73F8FFFF:P, PWD, JAM, RW // 16K GPIO3
mc 0x73F90000:P 0x73F93FFF:P, PWD, JAM, RW // 16K GPIO4
mc 0x73FA0000:P 0x73FA3FFF:P, PWD, JAM, RW // 16K GPT
mc 0x73FA8000:P 0x73FABFFF:P, PWD, JAM, RW // 16K IOMUXC
mc 0x73FD0000:P 0x73FD3FFF:P, PWD, JAM, RW // 16K SRC
mc 0x73FD4000:P 0x73FD7FFF:P, PWD, JAM, RW // 16K CCM
mc 0x83F80000:P 0x83F83FFF:P, PWD, JAM, RW // 16K DPLLIP1
mc 0x83F84000:P 0x83F87FFF:P, PWD, JAM, RW // 16K DPLLIP2
mc 0x83F88000:P 0x83F8BFFF:P, PWD, JAM, RW // 16K DPLLIP3
mc 0x83FD8000:P 0x83FDBFFF:P, PWD, JAM, RW // 16K EMI
mc 0x90000000:P 0x9FFFFFFF:P, PWD, JAM, RW // 256M CSD0 DDR
mc 0xA0000000:P 0xAFFFFFFF:P, PWD, JAM, RW // 256M CSD1 DDR

//        ____User Supplied Setup Commands Go Here____

// TO DO #2 -- If your target board requires any special MEP settings
//             (e.g. special JTAG initialization), add the commands to
//             make those settings here.


// End of initial one-time only setup script.  If this is a non-intrusive
// attach connection, or if a normal debug connection fails to connect
// properly, then exit at this point.  Otherwise continue on with optional
// additional initialization.

if (@.4$INIT_TYPE != 0) {dv "Non-intrusive attach connection\n"; goto EXIT}
if (@$trgt_cpu_state != $tcs.halt) {dv "Debug connection failed, "; doq TCS; goto EXIT}

// TO DO #3 -- Comment out all but one of the next three commands to
//             control IF and HOW the target is initialized when the
//             debugger is launched.  If no reset or target initialization
//             is needed then all these can be left commented out.

TI
//   RTI
//   RTNI
// The semihosting vector is +8 from the vector area base address, which
// on Cortex-A8 is configurable via the system coprocessor.  This option
// is required for hosted mode applications, and ignored for unhosted
// mode.
//

ew $semi_hosting_vector = @cp15_snvba + 8

:EXIT
dv "Finished reading $$#.\n"
return

//___________________________________________________________________
::DO_RTNI  // Reset Target with No Initialization.

    // Normally an  rt  command is sufficient, but it may be necessary
    // to slow down the JTAG clock first, depending on the affect of
    // reset on the processor.

    dv "Executing RTNI script function\n"
    rt
    return

//___________________________________________________________________
::DO_RTI   // Reset Target and Initialize.

    // Note that it may be necessary to slow down the JTAG clock first, 
    // depending on the affect of reset on the processor.

    dv "Executing RTI script function\n"
    rt
    TI	// call script DO_TI function
    return

//___________________________________________________________________
::DO_TI  // Target Initialize.

    if (@$trgt_cpu_state != $tcs.halt) { dv "Target Initialization commands skipped due to CPU state\n"; doq TCS; return }
    dv "Initializing target...\n"

    //  Memory Controller Setup
    //
    // TO DO #4 -- If your board has a different memory configuration than
    //             the reference board, then you may need to adapt the
    //             memory controller initialization script accordingly.
    //             These settings should match the settings used by your
    //             boot code during its hardware initialization phase.

    //  ew addr = value
    //  ew addr = value
    //  ew addr = value
    //  ew addr = value

    //        ____User Supplied Target Init Commands Go Here____

    // Reset settle down delay
    W 1000

    // SYS_ON_OFF_CTL(GPIO1_23)
    ew 0x73F84000:P = (@0x73F84000:P | (1 << 0n23))
    ew 0x73F84004:P = (@0x73F84000:P | (1 << 0n23))

    // select ARM / supervisor mode
    ew CPSR = 0x000001D3

    // Disable L2 cache by clearing bit 2 in cp15 auxiliary control register
    ew $tempvar = @cp15_auxctl
    ew $tempvar2 = (@$tempvar & 0xFFFFFFFD)
    ew cp15_auxctl = @$tempvar2

    // Disable WDOG triggered reset
    ew 0x73FD0000:P = 0x000002A1

    // Disable FPM, Set OSCNT (256 CKIL)
    ew 0x73FD4000:P = 0x00001EFF

    // Switch to lp_apm clock before configuring PLLs
    ew 0x73FD400C:P = 0x00000004

    // Disable auto-restart of PLL's
    ew 0x83F80004:P = 0x00000000
    ew 0x83F84004:P = 0x00000000
    ew 0x83F88004:P = 0x00000000

    // Setup PLL1 @800MHz with 24MHz crystal
    // mfi=8,pdf=0,mfd=2,mfn=1
    ew 0x83F80000:P = 0x00001220
    ew 0x83F80008:P = 0x00000081
    ew 0x83F8000C:P = 0x00000002
    ew 0x83F80010:P = 0x00000001
    ew 0x83F8001C:P = 0x00000080
    ew 0x83F80020:P = 0x00000002
    ew 0x83F80024:P = 0x00000001

    :loop1
    if ((@0x83F80000:P & 0x00000001) != 1) {goto loop1};

    // Setup PLL2 @665MHz with 24MHz crystal
    // mfi=6,pdf=0,mfd=95,mfn=89
    ew 0x83F84000:P = 0x00001220
    ew 0x83F84008:P = 0x00000060
    ew 0x83F8400C:P = 0x0000005F
    ew 0x83F84010:P = 0x00000059
    ew 0x83F8401C:P = 0x00000060
    ew 0x83F84020:P = 0x0000005F
    ew 0x83F84024:P = 0x00000059

    :loop2
    if ((@0x83F80000:P & 0x00000001) != 1) {goto loop2};

    // Setup PLL3 @216MHz with 24MHz crystal
    // mfi=6,pdf=2,mfd=3,mfn=3
    ew 0x83F88000:P = 0x00001220
    ew 0x83F88008:P = 0x00000062
    ew 0x83F8800C:P = 0x00000003
    ew 0x83F88010:P = 0x00000003
    ew 0x83F8801C:P = 0x00000062
    ew 0x83F88020:P = 0x00000003
    ew 0x83F88024:P = 0x00000003

    :loop3
    if ((@0x83F80000:P & 0x00000001) != 1) {goto loop3};

    // Switch ARM CPU to PLL1
    ew 0x73FD400C:P = 0x00000000

    // Insert delay to ensure PLL's have settled-down
    W 500

    // Enable auto-restart of PLL's
    ew 0x83F80004:P = 0x00000002
    ew 0x83F84004:P = 0x00000002
    ew 0x83F88004:P = 0x00000002

    // Initialize CCM module
    ew 0x73fd4014:P = 0x19239145
    ew 0x73fd4018:P = 0x000020C0
    ew 0x73fd401C:P = 0xA6A2A020
    ew 0x73FD4020:P = 0x02A5A88A
    ew 0x73FD4024:P = 0x00C30318
    ew 0x73fd4060:P = 0x000A00F0

    //
    // Initialize SDRAM controller
    //

    // DDR2 IOMUX configuration
    ew 0x73fa88a0:P = 0x00000200  // IOMUXC_SW_PAD_CTL_GRP_INMODE1          DDR2 mode
    ew 0x73fa850c:P = 0x000020c5  // IOMUXC_SW_PAD_CTL_PAD_EIM_SDODT1       Pull-D, HIGH DS
    ew 0x73fa8510:P = 0x000020c5  // IOMUXC_SW_PAD_CTL_PAD_EIM_SDODT0       Pull-D, HIGH DS
    ew 0x73fa883c:P = 0x00000002  // IOMUXC_SW_PAD_CTL_GRP_DDR_A0           MEDIUM DS
    ew 0x73fa8848:P = 0x00000002  // IOMUXC_SW_PAD_CTL_GRP_DDR_A1           MEDIUM DS
    ew 0x73fa84b8:P = 0x000000e7  // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK       MAX DS
    ew 0x73fa84bc:P = 0x00000045  // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0       Pull/Keep Disable
    ew 0x73fa84c0:P = 0x00000045  // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1       Pull/Keep Disable
    ew 0x73fa84c4:P = 0x00000045  // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2       Pull/Keep Disable
    ew 0x73fa84c8:P = 0x00000045  // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3       Pull/Keep Disable
    ew 0x73fa8820:P = 0x00000000  // IOMUXC_SW_PAD_CTL_GRP_DDRPKS           PUE = Keeper
    ew 0x73fa84a4:P = 0x00000003  // IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS         MEDIUM DS
    ew 0x73fa84a8:P = 0x00000003  // IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS         MEDIUM DS
    ew 0x73fa84ac:P = 0x000000e3  // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE        MEDIUM DS
    ew 0x73fa84b0:P = 0x000000e3  // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0      MEDIUM DS
    ew 0x73fa84b4:P = 0x000000e3  // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1      MEDIUM DS
    ew 0x73fa84cc:P = 0x000000e3  // IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0         MEDIUM DS
    ew 0x73fa84d0:P = 0x000000e2  // IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1         MEDIUM DS

    ew 0x73fa882c:P = 0x6         // DRAM_D31-24 to high
    ew 0x73fa88a4:P = 0x6         // DRAM_D0-7 to high
    ew 0x73fa88ac:P = 0x6         // DRAM_D8-15 to high
    ew 0x73fa88b8:P = 0x6         // DRAM_D16-23 to high

    // 13 ROW, 10 COL, 32Bit, SREF=4 Micron Model, CAS=3,  BL=4
    ew 0x83fd9000:P = 0x82a20000  // ESDCTL0
    ew 0x83fd9008:P = 0x82a20000  // ESDCTL1
    ew 0x83fd9010:P = 0x000ad0d0  // ESDMISC

    // ESDCFG0 tRFC=13 tXSR=28 tXP=2 tRP=3 tMRD=2 tRAS=8 tRRD=2 tWR=3 tRCD=3 tRC=11
    ew 0x83fd9004:P = 0x333574aa
    // ESDCFG1 tRFC=13 tXSR=28 tXP=2 tRP=3 tMRD=2 tRAS=8 tRRD=2 tWR=3 tRCD=3 tRC=11
    ew 0x83fd900c:P = 0x333574aa

    // Init DRAM on CS0
    ew 0x83fd9014:P = 0x04008008  // ESDSCR
    ew 0x83fd9014:P = 0x0000801a  // ESDSCR
    ew 0x83fd9014:P = 0x0000801b  // ESDSCR
    ew 0x83fd9014:P = 0x00448019  // ESDSCR
    ew 0x83fd9014:P = 0x07328018  // ESDSCR
    ew 0x83fd9014:P = 0x04008008  // ESDSCR
    ew 0x83fd9014:P = 0x00008010  // ESDSCR
    ew 0x83fd9014:P = 0x00008010  // ESDSCR
    ew 0x83fd9014:P = 0x06328018  // ESDSCR
    ew 0x83fd9014:P = 0x03808019  // ESDSCR
    ew 0x83fd9014:P = 0x00408019  // ESDSCR  ODT=150Ohm,CS0
    ew 0x83fd9014:P = 0x00008000  // ESDSCR
                              
    // Init DRAM on CS1           
    ew 0x83fd9014:P = 0x0400800c  // ESDSCR
    ew 0x83fd9014:P = 0x0000801e  // ESDSCR
    ew 0x83fd9014:P = 0x0000801f  // ESDSCR
    ew 0x83fd9014:P = 0x0000801d  // ESDSCR
    ew 0x83fd9014:P = 0x0732801c  // ESDSCR
    ew 0x83fd9014:P = 0x0400800c  // ESDSCR
    ew 0x83fd9014:P = 0x00008014  // ESDSCR
    ew 0x83fd9014:P = 0x00008014  // ESDSCR
    ew 0x83fd9014:P = 0x0632801c  // ESDSCR
    ew 0x83fd9014:P = 0x0380801d  // ESDSCR
    ew 0x83fd9014:P = 0x0040801d  // ESDSCR  ODT=150Ohm,CS0
    ew 0x83fd9014:P = 0x00008004  // ESDSCR

    ew 0x83fd9000:P = 0xb2a20000  // ESDCTL0
    ew 0x83fd9008:P = 0xb2a20000  // ESDCTL1
    ew 0x83fd9010:P = 0x000ad6d0  // ESDMISC RALAT=01, NO ODT
    ew 0x83fd9034:P = 0x90000000  // ESDCDLYGD
    ew 0x83fd9014:P = 0x00000000  // ESDSCR - clear "configuration request" bit

    eo ice_jtag_clock_freq = 20    // Speed up JTAG now that PLL is enabled

    dv "Initializing target done.\n"
    return

//___________________________________________________________________

// <eof>
