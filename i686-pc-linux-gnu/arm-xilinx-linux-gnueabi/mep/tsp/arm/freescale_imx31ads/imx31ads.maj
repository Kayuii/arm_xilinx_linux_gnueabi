+q  // Enter quiet mode
//___________________________________________________________________
//
//               Copyright (c) 2011 Mentor Graphics Corporation
//                           All rights reserved
//
//   THIS WORK CONTAINS TRADE SECRETS AND PROPRIETARY INFORMATION WHICH IS
//    THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS
//                        SUBJECT TO LICENSE TERMS.
//
//___________________________________________________________________
//
// Mentor Embedded Sourcery Probe target initialization file for the
// Freescale i.MX31-ADS reference platform.  It supports this platform as-is,
// and can be adapted to a new target based on this reference board,
// as detailed below.  For a brand new custom board not related to
// this reference board, it may be better to start from the template
// rather than trying to adapt this file.
//
// Target Description:
//
//     Board:   Freescale i.MX31-ADS reference platform
//     Device:  Freescale i.MX31
//     CPU ID:  ARM1136JF
//     Endian:  Little
//     Cores:   1
//
// Porting Guide:
//
// The user should make the following adaptations to port this file
// to a new target board based on the associated reference platform:
//
//        0. Review the MEP Probe Initialization section at
//           "TO DO #0" below to make sure the settings are
//           right for your board.
//        1. Update the memory configuration table for changes
//           in the new board's  *Physical*  memory map.  See
//           'TO DO #1' below.
//        2. If your target board requires any special MEP
//           settings, they should be added to the end of the
//           ONE_TIME_SETUP section.  See 'TO DO #2' below.
//        3. Decide whether the target should be automatically
//           reset and/or initialized upon start-up by choosing
//           the desired command at 'TO DO #3' below.  This
//           really depends on your use case.
//        4. If the board has no boot code (or bad boot code),
//           and you want to download into RAM, then you may
//           have to adapt the memory controller initialization
//           script at 'TO DO #4' below to account for changes
//           relative to the reference platform.
//
// NOTE:  Additional information on MON commands and the configuration
//        options used here is available in the online help system.
//___________________________________________________________________
//
// Base Board Jumper Settings
// --------------------------
// JP15 = NO_JUMPER		JP19 = NO_JUMPER    JP23 = NO_JUMPER    JP12 = 1,2
// JP16 = NO_JUMPER		JP20 = NO_JUMPER    JP24 = NO_JUMPER    JP14 = JUMPER
// JP17 = NO_JUMPER		JP21 = NO_JUMPER    JP25 = NO_JUMPER    JP6  = 2,3
// JP18 = NO_JUMPER		JP22 = NO_JUMPER    JP26 = NO_JUMPER    JP7  = 2,3
//
// ________________________________________________________________________
//
// CPU Board Jumper Settings
// -------------------------
// JP13 = 2,3         JP38 = 1,2          JP10 = JUMPER       JP6  = 1,2
// JP12 = 1,2         JP37 = JUMPER       JP9  = JUMPER       JP1  = 1,2
// JP17 = 1,2         JP31 = JUMPER       JP7  = JUMPER       JP32 = 1,2
// JP20 = 1,2         JP27 = JUMPER       JP8  = JUMPER       JP28 = 2,3
// JP14 = 1,2         JP25 = JUMPER       JP36 = 2,3          JP23 = 2,3
// JP19 = JUMPER      JP21 = JUMPER       JP35 = 1,2          JP16 = 2,3
// JP24 = JUMPER      JP18 = JUMPER       JP30 = JUMPER       JP4  = 2,3
// JP29 = JUMPER      JP15 = JUMPER       JP26 = 1,2          JP5  = 2,3
// JP33 = JUMPER      JP11 = JUMPER       JP22 = 1,2
//
//_________________________________________________________________________
//
// CPU Board SW2 Settings
// -------------------------
// 1 = OFF, 2 = ON, 3 = OFF, 4 = ON, 5 = ON, 6 = ON, 7 = ON, 8 = OFF
//
//_________________________________________________________________________

dv "Reading $$# ...\n"


// Initialization script preparation
// =================================

// The RTI, RTNI, and TI command aliases call script functions in this file.
// These command aliases should never be changed.

ea RTI   $$#.DO_RTI  // RTI  call DO_RTI script function  (Reset Target and Initialize)
ea RTNI  $$#.DO_RTNI // RTNI call DO_RTNI script function (Reset Target with No Initialization)
ea TI    $$#.DO_TI   // TI   call DO_TI script function   (Target Initialize without resetting)


// MEP Probe Initialization
// ==========================

// TO DO #0 -- Review the following MEP configuration options to make
//             sure they are right for your target board hardware and
//             processor device design.

// The  Trgt_Resets_JTAG  option informs the MEP probe whether the target
// board will forward a system reset (nSRST) to the JTAG interface (nTRST),
// or reset the system only without resetting the JTAG interface.  When in
// doubt, a YES setting is safer.  When the two reset circuits are known
// to be independent, which is strongly recommended, then a NO setting is
// recommended.

eo Trgt_Resets_JTAG  = yes

// The  Ice_JTAG_Use_RTCLK  and  Ice_JTAG_Clock_Freq  options are related
// and must be considered together.  An  Ice_JTAG_Use_RTCLK  setting of
// ON  selects adaptive clocking mode, where the JTAG clock is dynamically
// controlled by the target processor.  When  Ice_JTAG_Use_RTCLK  is set
// OFF  then normal (unthrottled) clocking is selected.
//
// When adaptive clocking is disabled, the  Ice_JTAG_Clock_Freq  option
// specifies the the JTAG clock (TCK) frequency in Megahertz, from
// 0.002 to 100 (depending on probe hardware capability).  A lower setting
// is safer, a higher setting yields higher performance.  Note that the
// requested frequency will be adjusted down to the closest frequency
// supported by the probe hardware (displaying this option will show the
// actual TCK frequency).
//
//     IJUR  Clock mode
//     ====  ========================
//     OFF   Free running TCK at specified frequency (RTCK is ignored)
//     ON    Adaptive clocking with frequency controlled by RTCK
//           (Ice_JTAG_Clock_Freq is ignored)
//
// Note that enabling  Ice_JTAG_Use_RTCLK  on target boards that do not
// drive the RTCK signal will lock up the JTAG interface.

eo Ice_JTAG_Use_RTCLK  = off
eo Ice_JTAG_Clock_Freq = 0.01   // start JTAG at 10kHz and increase it later
if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

// The following command can be used to define the details of the JTAG
// daisy chain.  It is only required for targets on which the MEP
// auto-detection algorithm cannot correctly determine the JTAG connection
// details.  On most boards this command can be omitted.
//
//    ew MEP_JTAG_DIMENSION = TAP_CNT, IR1_CNT [ , IR2_CNT ]  ...

ew MEP_JTAG_DIMENSION = 4,4,5,4,5

// The following commands can be used to define special JTAG initialization
// operations required by certain processors.  The first one, if defined,
// is scanned in right after the JTAG reset cycle completes, but before the
// standard JTAG initialization performed by the MEP.  The second, if
// defined, is scanned in right after the standard JTAG initialization
// performed by the MEP.  On most boards these can both be omitted.
//
//    ew MEP_JTAG_INIT0 = <scan-op> [ , <scan-op> ]  ...
//    ew MEP_JTAG_INIT1 = <scan-op> [ , <scan-op> ]  ...

// The  Ice_Power_Sense  option enables the target power monitor.  When
// target power is detected, the debug interface is enabled.

eo Ice_Power_Sense = VREF

// The  Ice_JTAG_TAP_Select  option controls which TAP on a multi-TAP
// daisy chain is associated with this debug connection.  This option
// can be omitted on targets which have one TAP.  Note that TAPs are
// numbered from 1-N, with TAP 1 being the one whose TDO is connected
// to the MEP probe.

eo Ice_Jtag_Tap_Select  = 2

// Physical Memory Configuration
// =============================

mc *:P, inv     // start with all *physical* memory (*:P) marked as invalid

// TO DO #1 -- Change the address range(s) below to match the  *physical*
//             address ranges of your ROM/flash and RAM areas.  Add more
//             MC commands as necessary for each memory mapped area.
//
// WARNING:  DO NOT confuse virtual (MVA) addresses with physical space.
//           Make sure to use physical addresses in the MC table.
//
// EXAMPLE:
//
//     mc  ________:P  ________:P,  PWE, JAM, RW    // DRAM
//     mc  ________:P  ________:P,  PWD, JAM, RO    // Flash or ROM
//     mc  ________:P  ________:P,  PWD, JAM, RW    // Peripheral registers
//
// Note that if your boot code remaps physical memory, then the MC table
// should reflect the mapping that is in effect for the code you are trying
// to debug.  When debugging boot code in flash, MC should match the mapping
// in effect when booting.  When debugging code in RAM, MC should match the
// mapping in effect when running code from RAM.
//
// Address Range          PWE  Access
// ---------------------- ---- -------
mc 00000000:P 00003FFF:P, PWE, JAM, RO	// Secure ROM
mc 43F00000:P 43F03FFF:P, PWE, JAM, RW  // AIPS A Control Registers on Platform Slot 0
mc 43FAC000:P 43FAFFFF:P, PWE, JAM, RW  // IOMUXC
mc 53F00000:P 53F03FFF:P, PWE, JAM, RW  // AIPS B Control Registers on Platform Slot 0
mc 53F80000:P 53F83FFF:P, PWE, JAM, RW  // CCM
mc 53FC0000:P 53FC3FFF:P, PWE, JAM, RW  // IPU
mc 80000000:P 8FFFFFFF:P, PWE, JAM, RW  // DRAM
mc A0000000:P A7FFFFFF:P, PWD, JAM, RO  // Boot ROM/Flash
mc B4000000:P B403FFFF:P, PWE, JAM, RW  // Ethernet, Serial I/O, Synth, CPLD & MMIO
mc B6000000:P B7FFFFFF:P, PWE, JAM, RW	// PSRAM
mc B8001000:P B8004FFF:P, PWE, JAM, RW	// Registers, ESDCTL, WEIM, M3IF & PCMCIA_IF

//        ____User Supplied Setup Commands Go Here____

// TO DO #2 -- If your target board requires any special MEP settings
//             (e.g. special JTAG initialization), add the commands to
//             make those settings here.


// End of initial one-time only setup script.  If this is a non-intrusive
// attach connection, or if a normal debug connection fails to connect
// properly, then exit at this point.  Otherwise continue on with optional
// additional initialization.

if (@.4$INIT_TYPE != 0) {dv "Non-intrusive attach connection\n"; goto EXIT}
if (@$trgt_cpu_state != $tcs.halt) {dv "Debug connection failed, "; doq TCS; goto EXIT}

// TO DO #3 -- Comment out all but one of the next three commands to
//             control IF and HOW the target is initialized when the
//             debugger is launched.  If no reset or target initialization
//             is needed then all these can be left commented out.

TI
//   RTI
//   RTNI

:EXIT
dv "Finished reading $$#.\n"
return

//___________________________________________________________________
::DO_RTNI  // Reset Target with No Initialization.

    // Normally an  rt  command is sufficient, but it may be necessary
    // to slow down the JTAG clock first, depending on the affect of
    // reset on the processor.

    dv "Executing RTNI script function\n"
    rt
    return 

//___________________________________________________________________
::DO_RTI   // Reset Target and Initialize.

    // Note that it may be necessary to slow down the JTAG clock first, 
    // depending on the affect of reset on the processor.

    dv "Executing RTI script function\n"
    rt
    TI	// call script DO_TI function
    return

//___________________________________________________________________
::DO_TI  // Target Initialize.

    if (@$trgt_cpu_state != $tcs.halt) { dv "Target Initialization commands skipped due to CPU state\n"; doq TCS; return }
    dv "Initializing target...\n"

    //  Memory Controller Setup
    //
    // TO DO #4 -- If your board has a different memory configuration than
    //             the reference board, then you may need to adapt the
    //             memory controller initialization script accordingly.
    //             These settings should match the settings used by your
    //             boot code during its hardware initialization phase.

    // system control co-processor setup
    ew cp15_cntrl = 0x00050078				// configure control register
    ew cp15_ppmr  = 0x40000015 				// peripheral memory remap, CP15_0_C15_C2_4

    // Enable Display Interface in IPU
    ew 0x53FC0000 = 0x040

    // CCM clock control module setup
    // FPM-disable, PLL reference clock = CKIH, MCU PLL enabled, MCUPLL MCU clock domain source
    // clock setup 399MHz - 26MHz input, PD=1,MFI=7, MFN=27, MFD=40
    ew 0x53F80000 = 0x074B0B7D
    ew 0x53F80004 = 0xFF871D50
    ew 0x53F80010 = 0x00271C1B

    eo Ice_JTAG_Clock_Freq = 25
    if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

    //=====================================================
    // Configure 16 bit PSRAM on CS5
    //=====================================================
    ew 0xb8002050 = 0x0000DCF6
    ew 0xb8002054 = 0X444A4541
    ew 0xb8002058 = 0X44443302
    ew 0xb6000000 = 0XCAFECAFE

    //=====================================================
    // Start 16 bit NorFlash Initialization on CS0
    //=====================================================
    ew 0xb8002000 = 0x0000CC03
    ew 0xb8002004 = 0xa0330D01
    ew 0xb8002008 = 0x00220800

    //=======================================================
    // Configure CPLD on CS4 
    //=======================================================
    ew  0xb8002040 = 0x0000DCF6
    ew  0xb8002044 = 0x444A4541
    ew  0xb8002048 = 0x44443302

    // Disable maximum drive strength for SDRAM/DDR lines by clearing DSE1 bits
    // in SW_PAD_CTL registers

    // SDRAM initialization
    // --------------------
    // Initialization script for 32 bit DDR on Tortola EVB 
    // enable mobile/low power DDR SDRAM in ESDMISC
    ew 0xB8001010 = 0x00000004
    // configure the ESDRAM configuration register ESDCFG0. 
    ew 0xB8001004 = 0x006ac73a
    // load ESDRAM control register 0 ESDCTL0
    ew 0xB8001000 = 0x92100000
    ew 0x80000f00 = 0x12344321
    // load ESDRAM control register 0 ESDCTL0
    ew 0xB8001000 = 0xa2100000
    ew 0x80000000 = 0x12344321
    ew 0x80000000 = 0x12344321
    // load ESDRAM control register 0 ESDCTL0
    ew 0xB8001000 = 0xb2100000
    eb 0x80000033 = 0xda
    eb 0x81000000 = 0xff
    // load ESDRAM control register 0 ESDCTL0
    ew 0xB8001000 = 0x82226080
    ew 0x80000000 = 0xDEADBEEF
    //
    // Rest Delay Line Measurement for DDR
    ew 0xB8001010 = 0x0000000c
    //

    dv "Initializing target done.\n"
    return

//___________________________________________________________________

// <eof>
