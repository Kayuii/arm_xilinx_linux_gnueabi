+q  // Enter quiet mode
//___________________________________________________________________
//
//               Copyright (c) 2011 Mentor Graphics Corporation
//                           All rights reserved
//
//   THIS WORK CONTAINS TRADE SECRETS AND PROPRIETARY INFORMATION WHICH IS
//    THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS
//                        SUBJECT TO LICENSE TERMS.
//
//___________________________________________________________________
//
// Mentor Embedded Sourcery Probe target initialization file for the
// TI AM3517-EVM Rev B  reference platform.  It supports this platform as-is,
// and can be adapted to a new target based on this reference board,
// as detailed below.  For a brand new custom board not related to
// this reference board, it may be better to start from the template
// rather than trying to adapt this file.
//
// Target Description:
//
//     Board:   TI AM3517-EVM Rev B Reference Platform
//     Device:  TI AM3517
//     CPU ID:  Cortex-A8
//     Endian:  Little
//     Cores:   1
//
// Porting Guide:
//
// The user should make the following adaptations to port this file
// to a new target board based on the associated reference platform:
//
//        0. Review the MEP Probe Initialization section at
//           "TO DO #0" below to make sure the settings are
//           right for your board.
//        1. Update the memory configuration table for changes
//           in the new board's  *Physical*  memory map.  See
//           'TO DO #1' below.
//        2. If your target board requires any special MEP
//           settings, they should be added to the end of the
//           ONE_TIME_SETUP section.  See 'TO DO #2' below.
//        3. Decide whether the target should be automatically
//           reset and/or initialized upon start-up by choosing
//           the desired command at 'TO DO #3' below.  This
//           really depends on your use case.
//        4. If the board has no boot code (or bad boot code),
//           and you want to download into RAM, then you may
//           have to adapt the memory controller initialization
//           script at 'TO DO #4' below to account for changes
//           relative to the reference platform.
//
// NOTE:  Additional information on MON commands and the configuration
//        options used here is available in the online help system.
//___________________________________________________________________
dv "Reading $$# ...\n"


// Initialization script preparation
// =================================

// The RTI, RTNI, and TI command aliases call script functions in this file.
// These command aliases should never be changed.

ea RTI   $$#.DO_RTI  // RTI  call DO_RTI script function  (Reset Target and Initialize)
ea RTNI  $$#.DO_RTNI // RTNI call DO_RTNI script function (Reset Target with No Initialization)
ea TI    $$#.DO_TI   // TI   call DO_TI script function   (Target Initialize without resetting)

fr rd am3517evm.rd

// MEP Probe Initialization
// ==========================

// TO DO #0 -- Review the following MEP configuration options to make
//             sure they are right for your target board hardware and
//             processor device design.

// The  Trgt_Resets_JTAG  option informs the MEP probe whether the target
// board will forward a system reset (nSRST) to the JTAG interface (nTRST),
// or reset the system only without resetting the JTAG interface.  When in
// doubt, a YES setting is safer.  When the two reset circuits are known
// to be independent, which is strongly recommended, then a NO setting is
// recommended.

eo Trgt_Resets_JTAG  = yes

// The  Ice_JTAG_Use_RTCLK  and  Ice_JTAG_Clock_Freq  options are related
// and must be considered together.  An  Ice_JTAG_Use_RTCLK  setting of
// ON  selects adaptive clocking mode, where the JTAG clock is dynamically
// controlled by the target processor.  When  Ice_JTAG_Use_RTCLK  is set
// OFF  then normal (unthrottled) clocking is selected.
//
// When adaptive clocking is disabled, the  Ice_JTAG_Clock_Freq  option
// specifies the the JTAG clock (TCK) frequency in Megahertz, from
// 0.002 to 100 (depending on probe hardware capability).  A lower setting
// is safer, a higher setting yields higher performance.  Note that the
// requested frequency will be adjusted down to the closest frequency
// supported by the probe hardware (displaying this option will show the
// actual TCK frequency).
//
//     IJUR  Clock mode
//     ====  ========================
//     OFF   Free running TCK at specified frequency (RTCK is ignored)
//     ON    Adaptive clocking with frequency controlled by RTCK
//           (Ice_JTAG_Clock_Freq is ignored)
//
// Note that enabling  Ice_JTAG_Use_RTCLK  on target boards that do not
// drive the RTCK signal will lock up the JTAG interface.

eo Ice_JTAG_Use_RTCLK  = off
eo Ice_JTAG_Clock_Freq = 10
if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

// The following command can be used to define the details of the JTAG
// daisy chain.  It is only required for targets on which the MEP
// auto-detection algorithm cannot correctly determine the JTAG connection
// details.  On most boards this command can be omitted.
//
//    ew MEP_JTAG_DIMENSION = TAP_CNT, IR1_CNT [ , IR2_CNT ]  ...

ew MEP_JTAG_DIMENSION = 2,4,6

// The following commands can be used to define special JTAG initialization
// operations required by certain processors.  The first one, if defined,
// is scanned in right after the JTAG reset cycle completes, but before the
// standard JTAG initialization performed by the MEP.  The second, if
// defined, is scanned in right after the standard JTAG initialization
// performed by the MEP.  On most boards these can both be omitted.
//
//    ew MEP_JTAG_INIT0 = <scan-op> [ , <scan-op> ]  ...
//    ew MEP_JTAG_INIT1 = <scan-op> [ , <scan-op> ]  ...

//                  INP IR#6,  TDI = 7, INP DR#8, TDI = 89, INP IR#6,  TDI = 2, IN DR#32, A_002108, IN IR#6,  TDI = 3F, IN IR#32, TDI=F's
ew MEP_JTAG_INIT0 = 89000006, 00000007, 09000008, 00000089, 89000006, 00000002, 09000020, a3002108, 81000006, 0000003f, 81000020, ffffffff

// The  Ice_Power_Sense  option enables the target power monitor.  When
// target power is detected, the debug interface is enabled.

eo Ice_Power_Sense = VREF

// The  Ice_JTAG_TAP_Select  option controls which TAP on a multi-TAP
// daisy chain is associated with this debug connection.  This option
// can be omitted on targets which have one TAP.  Note that TAPs are
// numbered from 1-N, with TAP 1 being the one whose TDO is connected
// to the MEP probe.
//
//    eo Ice_JTAG_TAP_Select = <num>

eo Ice_JTAG_TAP_Select = 1

// Physical Memory Configuration
// =============================

mc *:P, inv     // start with all *physical* memory (*:P) marked as invalid

// TO DO #1 -- Change the address range(s) below to match the  *physical*
//             address ranges of your ROM/flash and RAM areas.  Add more
//             MC commands as necessary for each memory mapped area.
//
// WARNING:  DO NOT confuse virtual (MVA) addresses with physical space.
//           Make sure to use physical addresses in the MC table.
//
// EXAMPLE:
//
//     mc  ________:P  ________:P,  PWE, JAM, RW    // DRAM
//     mc  ________:P  ________:P,  PWD, JAM, RO    // Flash or ROM
//     mc  ________:P  ________:P,  PWD, JAM, RW    // Peripheral registers
//
// Note that if your boot code remaps physical memory, then the MC table
// should reflect the mapping that is in effect for the code you are trying
// to debug.  When debugging boot code in flash, MC should match the mapping
// in effect when booting.  When debugging code in RAM, MC should match the
// mapping in effect when running code from RAM.
//
// Address Range          PWE  Access
// ---------------------- ---- -------
mc 0x00000000:P 0x3FFFFFFF:P, PWD, JAM, RW	// GPMC
mc 0x40000000:P 0x40013FFF:P, PWD, JAM, RO	// Boot ROM internal - Secure
mc 0x40014000:P 0x4001BFFF:P, PWD, JAM, RO	// Boot ROM internal - Public
mc 0x40200000:P 0x4020FFFF:P, PWE, JAM, RW	// SRAM internal
mc 0x48000000:P 0x48FFFFFF:P, PWD, JAM, RW	// L4-Core
mc 0x49000000:P 0x490FFFFF:P, PWD, JAM, RW	// L4-Per
mc 0x50000000:P 0x5000FFFF:P, PWD, JAM, RW	// SGX
mc 0x54000000:P 0x547FFFFF:P, PWD, JAM, RW	// L4-Emu
mc 0x5C000000:P 0x5EFFFFFF:P, PWD, JAM, RW	// IPSS
mc 0x68000000:P 0x68FFFFFF:P, PWD, JAM, RW	// L3 Control Registers
mc 0x6C000000:P 0x6CFFFFFF:P, PWD, JAM, RW	// SMS registers
mc 0x6D000000:P 0x6DFFFFFF:P, PWD, JAM, RW	// EMIF4 registers
mc 0x6E000000:P 0x6EFFFFFF:P, PWD, JAM, RW	// GPMC registers
mc 0x70000000:P 0x7FFFFFFF:P, PWD, JAM, RW	// EMIF4/SMS virtual Address space 0
mc 0x80000000:P 0x8FFFFFFF:P, PWE, JAM, RW	// 256 MB SDRAM 
mc 0xE0000000:P 0xFFFFFFFF:P, PWD, JAM, RW	// EMIF4/SMS virtual Address space 1

//        ____User Supplied Setup Commands Go Here____

// TO DO #2 -- If your target board requires any special MEP settings
//             (e.g. special JTAG initialization), add the commands to
//             make those settings here.


// End of initial one-time only setup script.  If this is a non-intrusive
// attach connection, or if a normal debug connection fails to connect
// properly, then exit at this point.  Otherwise continue on with optional
// additional initialization.

if (@.4$INIT_TYPE != 0) {dv "Non-intrusive attach connection\n"; goto EXIT}
if (@$trgt_cpu_state != $tcs.halt) {dv "Debug connection failed, "; doq TCS; goto EXIT}

// TO DO #3 -- Comment out all but one of the next three commands to
//             control IF and HOW the target is initialized when the
//             debugger is launched.  If no reset or target initialization
//             is needed then all these can be left commented out.

TI
//   RTI
//   RTNI

// The semihosting vector is +8 from the vector area base address, which
// on Cortex-A8 is configurable via the system coprocessor.  This option
// is required for hosted mode applications, and ignored for unhosted
// mode.
//

ew $semi_hosting_vector = @cp15_snvba + 8

:EXIT
dv "Finished reading $$#.\n"
return

//___________________________________________________________________
::DO_RTNI  // Reset Target with No Initialization.

    // Normally an  rt  command is sufficient, but it may be necessary
    // to slow down the JTAG clock first, depending on the affect of
    // reset on the processor.

    dv "Executing RTNI script function\n"
    rt
    return

//___________________________________________________________________
::DO_RTI   // Reset Target and Initialize.

    // Note that it may be necessary to slow down the JTAG clock first, 
    // depending on the affect of reset on the processor.

    dv "Executing RTI script function\n"
    rt
    TI	// call script DO_TI function
    return

//___________________________________________________________________
::DO_TI  // Target Initialize.

    if (@$trgt_cpu_state != $tcs.halt) { dv "Target Initialization commands skipped due to CPU state\n"; doq TCS; return }
    dv "Initializing target...\n"

    //  Memory Controller Setup
    //
    // TO DO #4 -- If your board has a different memory configuration than
    //             the reference board, then you may need to adapt the
    //             memory controller initialization script accordingly.
    //             These settings should match the settings used by your
    //             boot code during its hardware initialization phase.

    // Disable watchdog

    //   // Enable clock
    //   // enable Interface clock
    //   OUT_REGL(0x48004C10, 0x20);
    ew 0x48004C10:p = 0x20

    //   // enable functional clock
    //   OUT_REGL(0x48004C00, 0x20);
    ew 0x48004C00:p = 0x20

    //   // Check that module is Idle
    //   while (IN_REGL(0x48004C20) & 0x20);
    :label10
    if ((@0x48004C20:p & 0x20) != 0n0) { goto label10 }

    //   // Disabler  watchdog 2
    //   // Wait until reset complete
    //   while (!(IN_REGL(0x48314014) & 0x01));
    :label20
    if ((@0x48314014:p & 0x01) == 0n0) { goto label20 }

    //   // Disable 32Khz watchdog timer
    //   OUT_REGL(0x48314048, 0x0000AAAA);
    ew 0x48314048:p = 0x0000AAAA

    //   while (IN_REGL(0x48314034) & 0x10);
    :label30
    if ((@0x48314034:p & 0x10) != 0n0) { goto label30 }

    //   // Disable 32Khz watchdog timer
    //   OUT_REGL(0x48314048, 0x00005555);
    ew 0x48314048:p = 0x00005555

    //   while (IN_REGL(0x48314034) & 0x10);
    :label40
    if ((@0x48314034:p & 0x10) != 0n0) { goto label40 }
    
    // Initialize power and sleep controller

    //   // Turn on CORE power domain (CPU *should* default to on)
    //   SETBIT_REGL(CORE_PRM + 0xE0, 0x00000003);
    ew CORE_PRM = (@(CORE_PRM+0xE0) | 0x00000003)

    //   // Turn on MPU power domain (CPU *should* default to on)
    //   SETBIT_REGL(MPU_PRM + 0xE0, 0x00000003);
    ew MPU_PRM = (@(MPU_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(IVA2_PRM + 0xE0, 0x00000003);
    ew IVA2_PRM = (@(IVA2_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(OCP_SYSTEM_REGISTERS_PRM + 0xE0,  0x00000003);
    ew OCP_SYSTEM_REGISTERS_PRM = (@(OCP_SYSTEM_REGISTERS_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(GFX_PRM + 0xE0,  0x00000003);
    ew GFX_PRM = (@(GFX_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(WKUP_PRM + 0xE0,  0x00000003);
    ew WKUP_PRM = (@(WKUP_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(CLOCK_CONTROL_REGISTERS_PRM + 0xE0,  0x00000003);
    ew CLOCK_CONTROL_REGISTERS_PRM = (@(CLOCK_CONTROL_REGISTERS_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(DSS_PRM + 0xE0,  0x00000003);
    ew DSS_PRM = (@(DSS_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(CAM_PRM + 0xE0,  0x00000003);
    ew CAM_PRM = (@(CAM_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(PER_PRM + 0xE0,  0x00000003);
    ew PER_PRM = (@(PER_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(EMU_PRM + 0xE0,  0x00000003);
    ew EMU_PRM = (@(EMU_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(GLOBAL_REGISTERS_PRM + 0xE0,  0x00000003);
    ew GLOBAL_REGISTERS_PRM = (@(GLOBAL_REGISTERS_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(NEON_PRM + 0xE0,  0x00000003);
    ew NEON_PRM = (@(NEON_PRM+0xE0) | 0x00000003)

    //   SETBIT_REGL(USBHOST_PRM + 0xE0,  0x00000003);
    ew USBHOST_PRM = (@(USBHOST_PRM+0xE0) | 0x00000003)
  

    // Initialize I/O configuration registers

    eh $mode = 0x0
    eh $pull_en = 0x0
    eh $pull_type = 0x2
    eh $temp = ((@$mode & 0x7) | ((@$pull_en & 0x1)<<0n3) | ((@$pull_type & 0x1)<<0n4) | ((@$pull_type & 0x2)<<0n7))

    eh PADCONF_SYS_NIRQ_HI     = @$temp // sys_clkout2 (gpio 186)
    eh PADCONF_SYS_OFF_MODE_HI = @$temp // sys_clkout1 (gpio 10 ) 

    //   // Turn on clock out1
    //   OUT_REGL(PRM_CLKOUT_CTRL, 0x80);	// 26M CLK
    ew PRM_CLKOUT_CTRL = 0x80

    //   // Turn on clock out2
    //   OUT_REGL(CM_CLKOUT_CTRL, 0x83);	// 54M CLK
    ew CM_CLKOUT_CTRL = 0x83

    //   // enable the function clock for GPIO 2-6
    //   temp = IN_REGL(CM_FCLKEN_PER);
    //   temp &= ~(0x1f << 13);
    //   temp |= 0x1f << 13;
    //   OUT_REGL(CM_FCLKEN_PER, temp);
    ew CM_FCLKEN_PER = ((@CM_FCLKEN_PER & ~(0x1F<<0n13)) | (0x1F<<0n13))

    //   // enable the function clock for GPIO 1
    //   temp = IN_REGL(CM_FCLKEN_WKUP);
    //   temp &= ~(1 << 3);
    //   temp |= 1 << 3;
    //   OUT_REGL(CM_FCLKEN_WKUP, temp);
    ew CM_FCLKEN_WKUP = ((@CM_FCLKEN_WKUP & ~(0x1<<0n3)) | (0x1<<0n3))

    //   // enable the interface clock for GPIO 2-6
    //   temp = IN_REGL(CM_ICLKEN_PER);
    //   temp &= ~(0x1f << 13);
    //   temp |= 0x1f << 13;
    //   OUT_REGL(CM_ICLKEN_PER, temp);
    ew CM_ICLKEN_PER = ((@CM_ICLKEN_PER & ~(0x1F<<0n13)) | (0x1F<<0n13))

    //   // enable the interface clock for GPIO 1
    //   temp = IN_REGL(CM_ICLKEN_WKUP);
    //   temp &= ~(1 << 3);
    //   temp |= 1 << 3;
    //   OUT_REGL(CM_ICLKEN_WKUP, temp);
    ew CM_ICLKEN_WKUP = ((@CM_ICLKEN_WKUP & ~(0x1<<0n3)) | (0x1<<0n3))

    // Initialize cpu, system and peripheral clocks

    //   /********************************/
    //   /* Put CORE in low power bypass  (DPLL3) */
    //   /********************************/
    //   temp = IN_REGL(CLOCK_CONTROL_REGISTERS_CM);
    //   temp &= ~(0x7 << 0);
    //   temp |= 0x5 << 0;
    //   OUT_REGL(CLOCK_CONTROL_REGISTERS_CM, temp);
    ew CLOCK_CONTROL_REGISTERS_CM = ((@CLOCK_CONTROL_REGISTERS_CM & ~(0x7<<0n0)) | (0x5<<0n0))

    //   // Wait for bypass mode
    //   while ((IN_REGL(CLOCK_CONTROL_REGISTERS_CM + 0x20) & 0x00000001) == 1) ;
    :label100
    if ((@(CLOCK_CONTROL_REGISTERS_CM+0x20) & 0x00000001) == 0n1) { goto label100 }

    //   /*******************************/
    //   /* Put MPU in low power bypass  (DPLL1) */
    //   /*******************************/
    //   temp = IN_REGL(CM_CLKEN_PLL_MPU);
    //   temp &= ~(0x7 << 0);
    //   temp |= 0x5 << 0;
    //   OUT_REGL(CM_CLKEN_PLL_MPU, temp);
    ew CM_CLKEN_PLL_MPU = ((@CM_CLKEN_PLL_MPU & ~(0x7<<0n0)) | (0x5<<0n0))

    //   // Wait for bypass mode
    //   while ((IN_REGL(CM_IDLEST_PLL_MPU) & 0x00000001) == 1) ;
    :label102
    if ((@CM_IDLEST_PLL_MPU & 0x00000001) == 0n1) { goto label102 }

    //   /*********************************************/
    //   /* Put peripheral bus in low power stop mode  (DPLL4) */
    //   /*********************************************/
    //   temp = IN_REGL(CLOCK_CONTROL_REGISTERS_CM);
    //   temp &= ~(0x7 << 16);
    //   temp |= 0x1 << 16;
    //   OUT_REGL(CLOCK_CONTROL_REGISTERS_CM, temp);
    ew CLOCK_CONTROL_REGISTERS_CM = ((@CLOCK_CONTROL_REGISTERS_CM & ~(0x7<<0n16)) | (0x1<<0n16))

    //   // Wait for stop mode
    //   while ((IN_REGL(CLOCK_CONTROL_REGISTERS_CM + 0x20) & 0x00000002) == 1) ;
    :label103
    if ((@(CLOCK_CONTROL_REGISTERS_CM+0x20) & 0x00000002) == 0n1) { goto label103 }

    //   /*********************************************/
    //   /* Put per2 in low power stop mode  (DPLL5) */
    //   /*********************************************/
    //   temp = IN_REGL(CLOCK_CONTROL_REGISTERS_CM + 0x04);
    //   temp &= ~(0x7 << 0);
    //   temp |= 0x1 << 0;
    //   OUT_REGL(CLOCK_CONTROL_REGISTERS_CM + 0x04, temp);
    ew (CLOCK_CONTROL_REGISTERS_CM+0x04) = ((@(CLOCK_CONTROL_REGISTERS_CM+0x04) & ~(0x7<<0n0)) | (0x1<<0n0))

    //   // Wait for stop mode
    //   while ((IN_REGL(CLOCK_CONTROL_REGISTERS_CM + 0x24) & 0x00000001) == 1) ;
    :label104
    if ((@(CLOCK_CONTROL_REGISTERS_CM+0x24) & 0x00000001) == 0n1) { goto label104 }

    //   /*********************************/
    //   /* Set input clock frequency     */
    //   /*********************************/
    //   OUT_REGL(PRM_CLKSEL, 0x3);	//  26.0MHz
    ew PRM_CLKSEL = 0x3

    //   // Set the sys clock divider to 1  
    //   temp = IN_REGL(PRM_CLCKSRC_CTRL);
    //   temp &= ~(PRM_CLCKSRC_CTRL_SYSCLKDIV);
    //   temp |= PRM_CLCKSRC_CTRL_SYSCLKDIV_1;
    //   OUT_REGL(PRM_CLCKSRC_CTRL, temp);
    ew PRM_CLCKSRC_CTRL = ((@PRM_CLCKSRC_CTRL & ~(0x3<<0n6)) | (0x1<<0n6))

    //   // Configure clock ratios for all L3, L4 targets
    //   OUT_REGL(CM_CLKSEL_CORE,   (2 << 0) |	// L3
    //                            (2 << 2) |	// L4
    //                            (2 << 4) |	// FSHOSTUSB
    //                            (0 << 6) |	// GPT10
    //                            (0 << 7) |	// GPT11
    //                            (3 << 8));	// SSI
    ew CM_CLKSEL_CORE = 0x32A

    //   /*********************************/
    //   /* Configure MPU (DPLL 1) 500MHz */
    //   /*********************************/
    //   // (26 Mhz * 250)/(12 + 1) = 500 Mhz
    //   mult = 250;
    ew $mult = 0n250

    //   if (sys_clock_divide_value() == PRM_CLCKSRC_CTRL_SYSCLKDIV_2)
    if ((@PRM_CLCKSRC_CTRL & (0x3<<0n6)) != (0x2<<0n6)) { goto label1 }

    //   {
    //      // (13 Mhz * 2 * 250)/(12 + 1) = 500 Mhz
    //      mult *= 2;
    ew $mult = @$mult * 0n2

    //   }
    :label1

    //   div = 12;
    //   freq = 7;
    //   m2 = 1;  // MPU_DPLL_CLKOUT (DPLL1 CLKOUTX2): 1000 Mhz
    ew $div = 0n12
    ew $freq = 0n7
    ew $m2 = 0n1

    //   temp = IN_REGL(CM_CLKSEL1_PLL_MPU);
    //   temp &= ~(0x7FF << 8);
    //   temp |= mult << 8;
    //   temp &= ~(0x7F << 0);
    //   temp |= div << 0;
    //   OUT_REGL(CM_CLKSEL1_PLL_MPU, temp);
    ew CM_CLKSEL1_PLL_MPU = ((((@CM_CLKSEL1_PLL_MPU & ~(0x7FF<<0n8)) | (@$mult<<0n8)) & ~(0x7F<<0n0)) | (@$div<<0n0))

    //   temp = IN_REGL(CM_CLKSEL2_PLL_MPU);
    //   temp &= ~(0x1F << 0);
    //   temp |= m2 << 0;
    //   OUT_REGL(CM_CLKSEL2_PLL_MPU, temp);
    ew CM_CLKSEL2_PLL_MPU = ((@CM_CLKSEL2_PLL_MPU & ~(0x1F<<0n0)) | (@$m2<<0n0))

    //   temp = IN_REGL(CM_CLKEN_PLL_MPU);
    //   temp &= ~(0xF << 4);
    //   temp |= freq << 4;
    //   OUT_REGL(CM_CLKEN_PLL_MPU, temp);
    ew CM_CLKEN_PLL_MPU = ((@CM_CLKEN_PLL_MPU & ~(0xF<<0n4)) | (@$freq<<0n4))

    //   /**********************************/
    //   /* Configure CORE (DPLL 3) 166MHz */
    //   /**********************************/
    //   // Reference clock is sys clock (26 Mhz) / 2
    //   // (13 Mhz * 166)/(12 + 1) = 166 Mhz
    //   mult = 166;
    ew $mult = 0n166

    //   if (sys_clock_divide_value() == PRM_CLCKSRC_CTRL_SYSCLKDIV_2)
    if ((@PRM_CLCKSRC_CTRL & (0x3<<0n6)) != (0x2<<0n6)) { goto label2 }

    //   {
    //      // (6.5 Mhz * 2 * 166)/(12 + 1) = 166 Mhz
    //      mult *= 2;
    ew $mult = @$mult * 0n2

    //   }
    :label2

    //   div = 12;
    //   freq = 7;
    //   m2 = 1;  // CORE_DPLL_CLKOUT (166 Mhz)
    //   m3 = 2;  // EMU_CORE_ALWON_CLK (83 Mhz)
    ew $div = 0n12
    ew $freq = 0n7
    ew $m2 = 0n1
    ew $m3 = 0n2

    //   temp = IN_REGL(CM_CLKSEL1_PLL);
    //   temp &= ~(0x1F << 27);
    //   temp |= m2 << 27;
    //   temp &= ~(0x7FF << 16);
    //   temp |= mult << 16;
    //   temp &= ~(0x7F << 8);
    //   temp |= div << 8;
    //   OUT_REGL(CM_CLKSEL1_PLL, temp);
    ew CM_CLKSEL1_PLL = ((((((@CM_CLKSEL1_PLL & ~(0x1F<<0n27)) | (@$m2<<0n27)) & ~(0x7FF<<0n16)) | (@$mult<<0n16)) & ~(0x7F<<0n8)) | (@$div<<0n8))

    //   temp = IN_REGL(CM_CLKEN_PLL);
    //   temp &= ~(0xF << 4);
    //   temp |= freq << 4;
    //   OUT_REGL(CM_CLKEN_PLL, temp);
    ew CM_CLKEN_PLL = ((@CM_CLKEN_PLL & ~(0xF<<0n4)) | (@$freq<<0n4))

    //   temp = IN_REGL(CM_CLKSEL1_EMU);
    //   temp &= ~(0x1F << 16);
    //   temp |= m3 << 16;
    //   OUT_REGL(CM_CLKSEL1_EMU, temp);
    ew CM_CLKSEL1_EMU = ((@CM_CLKSEL1_EMU & ~(0x1F<<0n16)) | (@$m3<<0n16))

    //   /********************************************/
    //   /* Configure peripheral bus (DPLL 4) 864MHz */
    //   /********************************************/
    //   // (52 Mhz * 216)/(12 + 1) = 864 Mhz
    //   mult = 216;   // Note: DPLL4 is derived from DPLL3
    ew $mult = 0n216

    //   if (sys_clock_divide_value() == PRM_CLCKSRC_CTRL_SYSCLKDIV_2)
    if ((@PRM_CLCKSRC_CTRL & (0x3<<0n6)) != (0x2<<0n6)) { goto label3 }

    //   {
    //      // (26 Mhz * 2 * 216)/(12 + 1) = 864 Mhz
    //      mult *= 2;
    ew $mult = @$mult * 0n2

    //   }
    :label3

    //   div = 12;
    //   freq = 7;
    //   m2 = 9;  // 96 Mhz clock
    //   m3 = 16; // TV functional clock (54 Mhz)
    //   m4 = 9;  // DSS1_ALWON_FCLK (96 Mhz)
    //   m5 = 4;  // CAM_MCLK (216 Mhz)
    //   m6 = 3;  // EMU_PER_ALWON_CLK (288 Mhz)
    ew $div = 0n12
    ew $freq = 0n7
    ew $m2 = 0n9
    ew $m3 = 0n16
    ew $m4 = 0n9
    ew $m5 = 0n4
    ew $m6 = 0n3

    //   temp = IN_REGL(CM_CLKSEL2_PLL);
    //   temp &= ~(0x7F << 0);
    //   temp |= div << 0;
    //   temp &= ~(0x7FF << 8);
    //   temp |= mult << 8;
    //   OUT_REGL(CM_CLKSEL2_PLL, temp);
    ew CM_CLKSEL2_PLL = ((((@CM_CLKSEL2_PLL & ~(0x7F<<0n0)) | (@$div<<0n0)) & ~(0x7FF<<0n8)) | (@$mult<<0n8))

    //   temp = IN_REGL(CM_CLKEN_PLL);
    //   temp &= ~(0xF << 20);
    //   temp |= freq << 20;
    //   OUT_REGL(CM_CLKEN_PLL, temp);
    ew CM_CLKEN_PLL = ((@CM_CLKEN_PLL & ~(0xF<<0n20)) | (@$freq<<0n20))

    //   temp = IN_REGL(CM_CLKSEL3_PLL);
    //   temp &= ~(0x1F << 0);
    //   temp |= m2 << 0;
    //   OUT_REGL(CM_CLKSEL3_PLL, temp);
    ew CM_CLKSEL3_PLL = ((@CM_CLKSEL3_PLL & ~(0x1F<<0n0)) | (@$m2<<0n0))

    //   temp = IN_REGL(CM_CLKSEL_DSS);
    //   temp &= ~(0x1F << 8);
    //   temp |= m3 << 8;
    //   OUT_REGL(CM_CLKSEL_DSS, temp);
    ew CM_CLKSEL_DSS = ((@CM_CLKSEL_DSS & ~(0x1F<<0n8)) | (@$m3<<0n8))

    //   temp = IN_REGL(CM_CLKSEL_DSS);
    //   temp &= ~(0x1F << 0);
    //   temp |= m4 << 0;
    //   OUT_REGL(CM_CLKSEL_DSS, temp);
    ew CM_CLKSEL_DSS = ((@CM_CLKSEL_DSS & ~(0x1F<<0n0)) | (@$m4<<0n0))

    //   temp = IN_REGL(CM_CLKSEL_CAM);
    //   temp &= ~(0x1F << 0);
    //   temp |= m5 << 0;
    //   OUT_REGL(CM_CLKSEL_CAM, temp);
    ew CM_CLKSEL_CAM = ((@CM_CLKSEL_CAM & ~(0x1F<<0n0)) | (@$m5<<0n0))

    //   temp = IN_REGL(CM_CLKSEL1_EMU);
    //   temp &= ~(0x1F << 24);
    //   temp |= m6 << 24;
    //   OUT_REGL(CM_CLKSEL1_EMU, temp);
    ew CM_CLKSEL1_EMU = ((@CM_CLKSEL1_EMU & ~(0x1F<<0n24)) | (@$m6<<0n24))

       /*************/
       /* Lock CORE */
       /*************/
    //   temp = IN_REGL(CM_CLKEN_PLL);
    //   temp &= ~(0x7 << 0);
    //   temp |= 0x7 << 0;
    //   OUT_REGL(CM_CLKEN_PLL, temp);
    ew CM_CLKEN_PLL = ((@CM_CLKEN_PLL & ~(0x7<<0n0)) | (0x7<<0n0))

    //   // Wait for locked
    //   while ((IN_REGL(CLOCK_CONTROL_REGISTERS_CM + 0x20) & 0x00000001) == 0) ;
    :label105
    if ((@(CLOCK_CONTROL_REGISTERS_CM+0x20) & 0x00000001) == 0n0) { goto label105 }

    //   /************/
    //   /* Lock MPU */
    //   /************/
    //   temp = IN_REGL(CM_CLKEN_PLL_MPU);
    //   temp &= ~(0x7 << 0);
    //   temp |= 0x7 << 0;
    //   OUT_REGL(CM_CLKEN_PLL_MPU, temp);
    ew CM_CLKEN_PLL_MPU = ((@CM_CLKEN_PLL_MPU & ~(0x7<<0n0)) | (0x7<<0n0))

    //   // Wait for locked
    //   while ((IN_REGL(CM_IDLEST_PLL_MPU) & 0x00000001) == 0) ;
    :label106
    if ((@CM_IDLEST_PLL_MPU & 0x00000001) == 0n0) { goto label106 }

    //   /***********************/
    //   /* Lock peripheral bus */
    //   /***********************/
    //   temp = IN_REGL(CM_CLKEN_PLL);
    //   temp &= ~(0x7 << 16);
    //   temp |= 0x7 << 16;
    //   OUT_REGL(CM_CLKEN_PLL, temp);
    ew CM_CLKEN_PLL = ((@CM_CLKEN_PLL & ~(0x7<<0n16)) | (0x7<<0n16))

    //   // Wait for lock mode
    //   while ((IN_REGL(CLOCK_CONTROL_REGISTERS_CM + 0x20) & 0x00000002) == 0) ;
    :label107
    if ((@(CLOCK_CONTROL_REGISTERS_CM+0x20) & 0x00000002) == 0n0) { goto label107 }
  
    //   OUT_REGL(CM_FCLKEN1_CORE,  0xFFFFFFFF);
    ew CM_FCLKEN1_CORE = 0xFFFFFFFF

    //   OUT_REGL(CM_ICLKEN1_CORE,  0xFFFFFFFF);
    ew CM_ICLKEN1_CORE = 0xFFFFFFFF

    //   OUT_REGL(CM_ICLKEN2_CORE,  0xFFFFFFFF);
    ew CM_ICLKEN2_CORE = 0xFFFFFFFF

    //   OUT_REGL(CM_FCLKEN_WKUP,   0xFFFFFFFF);
    ew CM_FCLKEN_WKUP = 0xFFFFFFFF

    //   OUT_REGL(CM_ICLKEN_WKUP,   0xFFFFFFFF);
    ew CM_ICLKEN_WKUP = 0xFFFFFFFF

    //   OUT_REGL(CM_FCLKEN_PER,    0xFFFFFFFF);
    ew CM_FCLKEN_PER = 0xFFFFFFFF

    //   OUT_REGL(CM_ICLKEN_PER,    0xFFFFFFFF);
    ew CM_ICLKEN_PER = 0xFFFFFFFF

    //   OUT_REGL(CM_FCLKEN_DSS,    0x00000007);
    ew CM_FCLKEN_DSS = 0x00000007

    //   OUT_REGL(CM_ICLKEN_DSS,    0x00000001);
    ew CM_ICLKEN_DSS = 0x00000001

    // Initialize General Purpose Memory controller

    eh $mode = 0x0
    eh $pull_en = 0x0
    eh $pull_type = 0x2
    eh $temp = ((@$mode & 0x7) | ((@$pull_en & 0x1)<<0n3) | ((@$pull_type & 0x1)<<0n4) | ((@$pull_type & 0x2)<<0n7))

    eh PADCONF_sdrc_dqs3_HI     = @$temp // gpmc_a1
    eh PADCONF_gpmc_a2          = @$temp // gpmc_a2
    eh PADCONF_gpmc_a2_HI       = @$temp // gpmc_a3 
    eh PADCONF_gpmc_a4          = @$temp // gpmc_a4 
    eh PADCONF_gpmc_a4_HI       = @$temp // gpmc_a5 
    eh PADCONF_gpmc_a6          = @$temp // gpmc_a6 
    eh PADCONF_gpmc_a6_HI       = @$temp // gpmc_a7 
    eh PADCONF_gpmc_a8          = @$temp // gpmc_a8 
    eh PADCONF_gpmc_a8_HI       = @$temp // gpmc_a9 
    eh PADCONF_gpmc_a10         = @$temp // gpmc_a10 

    eh PADCONF_gpmc_a10_HI      = @$temp // gpmc_d0 
    eh PADCONF_gpmc_d1          = @$temp // gpmc_d1 
    eh PADCONF_gpmc_d1_HI       = @$temp // gpmc_d2 
    eh PADCONF_gpmc_d3          = @$temp // gpmc_d3 
    eh PADCONF_gpmc_d3_HI       = @$temp // gpmc_d4 
    eh PADCONF_gpmc_d5          = @$temp // gpmc_d5 
    eh PADCONF_gpmc_d5_HI       = @$temp // gpmc_d6 
    eh PADCONF_gpmc_d7          = @$temp // gpmc_d7 
    eh PADCONF_gpmc_d7_HI       = @$temp // gpmc_d8 
    eh PADCONF_gpmc_d9          = @$temp // gpmc_d9 
    eh PADCONF_gpmc_d9_HI       = @$temp // gpmc_d10 
    eh PADCONF_gpmc_d11         = @$temp // gpmc_d11 
    eh PADCONF_gpmc_d11_HI      = @$temp // gpmc_d12 
    eh PADCONF_gpmc_d13         = @$temp // gpmc_d13 
    eh PADCONF_gpmc_d13_HI      = @$temp // gpmc_d14 
    eh PADCONF_gpmc_d15         = @$temp // gpmc_d15 

    eh $mode = 0x0
    eh $pull_en = 0x1
    eh $pull_type = 0x3
    eh $temp = ((@$mode & 0x7) | ((@$pull_en & 0x1)<<0n3) | ((@$pull_type & 0x1)<<0n4) | ((@$pull_type & 0x2)<<0n7))

    eh PADCONF_gpmc_d15_HI      = @$temp // gpmc_ncs0 
    eh PADCONF_gpmc_ncs1        = @$temp // gpmc_ncs1 
    eh PADCONF_gpmc_ncs1_HI     = @$temp // gpmc_ncs2 
    eh PADCONF_gpmc_ncs3        = @$temp // gpmc_ncs3 

    eh PADCONF_gpmc_ncs3_HI     = @$temp // gpmc_ncs4 
    eh PADCONF_gpmc_ncs5        = @$temp // gpmc_ncs5 
    eh PADCONF_gpmc_ncs5_HI     = @$temp // gpmc_ncs6 

    eh $mode = 0x1
    eh $pull_en = 0x1
    eh $pull_type = 0x2
    eh $temp = ((@$mode & 0x7) | ((@$pull_en & 0x1)<<0n3) | ((@$pull_type & 0x1)<<0n4) | ((@$pull_type & 0x2)<<0n7))

    eh PADCONF_gpmc_ncs7        = @$temp // gpmc_ncs7 -> gpmc_io_dir 

    eh $mode = 0x0
    eh $pull_en = 0x0
    eh $pull_type = 0x2
    eh $temp = ((@$mode & 0x7) | ((@$pull_en & 0x1)<<0n3) | ((@$pull_type & 0x1)<<0n4) | ((@$pull_type & 0x2)<<0n7))

    eh PADCONF_gpmc_ncs7_HI     = @$temp // gpmc_clk 
    eh PADCONF_gpmc_nadv_ale    = @$temp // gpmc_adv_ale 
    eh PADCONF_gpmc_nadv_ale_HI = @$temp // gpmc_noe 
    eh PADCONF_gpmc_nwe         = @$temp // gpmc_nwe 

    eh $mode = 0x0
    eh $pull_en = 0x1
    eh $pull_type = 0x3
    eh $temp = ((@$mode & 0x7) | ((@$pull_en & 0x1)<<0n3) | ((@$pull_type & 0x1)<<0n4) | ((@$pull_type & 0x2)<<0n7))

    eh PADCONF_gpmc_nwe_HI      = @$temp // gpmc_nbe0_cle LAB/LVSOM ?

    eh PADCONF_gpmc_nbe1        = @$temp // gpmc_nbe1 
    eh PADCONF_gpmc_nbe1_HI     = @$temp // gpmc_nwp 
    eh PADCONF_gpmc_wait0_HI    = @$temp // gpmc_wait1 

    //   // Reset the GPMC
    //   OUT_REGL(GPMC_SYSCONFIG, 0x2);
    ew GPMC_SYSCONFIG = 0x2

    //   while (!IN_REGL(GPMC_SYSSTATUS)) {}
    :label108
    if (@GPMC_SYSSTATUS == 0n0) { goto label108 }

    //   // GPMC Configuration
    //   OUT_REGL(GPMC_SYSCONFIG, 0x00000010);	// GPMC_SYSCONFIG(0x10): No idle, L3 clock free running
    ew GPMC_SYSCONFIG = 0x00000010

    //   OUT_REGL(GPMC_TIMEOUT_CONTROL, 0x0);	// Time out disabled
    ew GPMC_TIMEOUT_CONTROL = 0x0

    //   OUT_REGL(GPMC_IRQENABLE, 0x00000000);	// GPMC_IRQENABLE(0x0C): All interrupts disabled
    ew GPMC_IRQENABLE = 0x00000000

    //   OUT_REGL(GPMC_CONFIG, 0x0010);	        // Write protect output pin high and Wait active Low
    ew GPMC_CONFIG = 0x0010

    //   /**********************************************************/
    //   /* CS0 -> PoP NAND 0x00000000                             */
    //   /**********************************************************/
    //   OUT_REGL(GPMC_CONFIG1_0, 0x00001800);
    ew GPMC_CONFIG1_0 = 0x00001800

    //   OUT_REGL(GPMC_CONFIG2_0, 0x00080800);
    ew GPMC_CONFIG2_0 = 0x00080800

    //   OUT_REGL(GPMC_CONFIG3_0, 0x00080800);
    ew GPMC_CONFIG3_0 = 0x00080800

    //   OUT_REGL(GPMC_CONFIG4_0, 0x06000600);
    ew GPMC_CONFIG4_0 = 0x06000600

    //   OUT_REGL(GPMC_CONFIG5_0, 0x00080808);
    ew GPMC_CONFIG5_0 = 0x00080808

    //   OUT_REGL(GPMC_CONFIG6_0, 0x000003CF);
    ew GPMC_CONFIG6_0 = 0x000003CF

    //   OUT_REGL(GPMC_CONFIG7_0, 0x00000F5F);
    ew GPMC_CONFIG7_0 = 0x00000F5F

    //   // CS1

    //   /**********************************************************/
    //   /* CS2 -> ON/OFF BOARD NOR BOOT 0x10000000                */
    //   /**********************************************************/
    //   OUT_REGL(GPMC_CONFIG1_2, 0x00001210);
    ew GPMC_CONFIG1_2 = 0x00001210

    //   OUT_REGL(GPMC_CONFIG2_2, 0x00101001);
    ew GPMC_CONFIG2_2 = 0x00101001

    //   OUT_REGL(GPMC_CONFIG3_2, 0x00020201);
    ew GPMC_CONFIG3_2 = 0x00020201

    //   OUT_REGL(GPMC_CONFIG4_2, 0x0F031003);
    ew GPMC_CONFIG4_2 = 0x0F031003

    //   OUT_REGL(GPMC_CONFIG5_2, 0x000F1111);
    ew GPMC_CONFIG5_2 = 0x000F1111

    //   OUT_REGL(GPMC_CONFIG6_2, 0x0F030080);
    ew GPMC_CONFIG6_2 = 0x0F030080

    //   OUT_REGL(GPMC_CONFIG7_2, 0x00000C50); // 64MB
    ew GPMC_CONFIG7_2 = 0x00000C50

    //   OUT_REGL(GPMC_CONFIG, 0x00000010);	// Don't use wait
    ew GPMC_CONFIG = 0x00000010

    // Initialize ram

    eh $mode = 0x0
    eh $pull_en = 0x1
    eh $pull_type = 0x3
    eh $temp = ((@$mode & 0x7) | ((@$pull_en & 0x1)<<0n3) | ((@$pull_type & 0x1)<<0n4) | ((@$pull_type & 0x2)<<0n7))

    eh PADCONF_SAD2D_SBUSFLAG_HI = @$temp // cke0
    eh PADCONF_SDRC_CKE1         = @$temp // cke1
 
    //   // Configure EMIF to Access Micron DDR2
    //   OUT_REGL(EMIF_DDR_PHY_CTRL_1,      (0x8046 | (EMIF_STROBE_ENABLE << 7)));
    ew EMIF_DDR_PHY_CTRL_1 = (0x8046 | (0x0<<0n7))

    //   OUT_REGL(EMIF_DDR_PHY_CTRL_1_SHDW, (0x8046 | (EMIF_STROBE_ENABLE << 7)));
    ew EMIF_DDR_PHY_CTRL_1_SHDW = (0x8046 | (0x0<<0n7))

    //   OUT_REGL(EMIF_DDR_PHY_CTRL_2,      0x0);
    ew EMIF_DDR_PHY_CTRL_2 = 0x0

    //   OUT_REGL(EMIF_IODFT_TLGC, IN_REGL(EMIF_IODFT_TLGC) | 0x400);
    ew EMIF_IODFT_TLGC = (@EMIF_IODFT_TLGC | 0x400)

    //   while((IN_REGL(EMIF_STATUS) & 0x4) == 0) ;
    :label109
    if ((@EMIF_STATUS & 0x4) == 0n0) { goto label109 }

    //   OUT_REGL(EMIF_IODFT_TLGC, IN_REGL(EMIF_IODFT_TLGC) | 0x1); // VRD - Debug Normal Mode
    ew EMIF_IODFT_TLGC = (@EMIF_IODFT_TLGC | 0x1)

    //    // EMIF DDR phy PLL is ready
    //   OUT_REGL(EMIF_SDRAM_TIM_1,         0x4448279);
    ew EMIF_SDRAM_TIM_1 = 0x4448279

    //   OUT_REGL(EMIF_SDRAM_TIM_1_SHDW,    0x4448279);
    ew EMIF_SDRAM_TIM_1_SHDW = 0x4448279

    //   OUT_REGL(EMIF_SDRAM_TIM_2,         0x342231CB);
    ew EMIF_SDRAM_TIM_2 = 0x342231CB

    //   OUT_REGL(EMIF_SDRAM_TIM_2_SHDW,    0x342231CB);
    ew EMIF_SDRAM_TIM_2_SHDW = 0x342231CB

    //   OUT_REGL(EMIF_SDRAM_TIM_3,         0x217);
    ew EMIF_SDRAM_TIM_3 = 0x217

    //   OUT_REGL(EMIF_SDRAM_TIM_3_SHDW,    0x217);
    ew EMIF_SDRAM_TIM_3_SHDW = 0x217

    //   OUT_REGL(EMIF_PWR_MGMT_CTRL,       0x80000000);
    ew EMIF_PWR_MGMT_CTRL = 0x80000000

    //   OUT_REGL(EMIF_PWR_MGMT_CTRL_SHDW,  0x80000000);
    ew EMIF_PWR_MGMT_CTRL_SHDW = 0x80000000

    //   OUT_REGL(EMIF_SDRAM_REF_CTRL,      0x50F);
    ew EMIF_SDRAM_REF_CTRL = 0x50F

    //   OUT_REGL(EMIF_SDRAM_REF_CTRL_SHDW, 0x50F);
    ew EMIF_SDRAM_REF_CTRL_SHDW = 0x50F

    //   OUT_REGL(EMIF_SDRAM_CONFIG,        0x43801432);
    ew EMIF_SDRAM_CONFIG = 0x43801432



    //Invalidate L1 Cache
    ci
    

    // Invalidate L2 Cache by calling SMI monitor
    ew 100:da = 0xE3A0C001 //  mov   r12,#0x00000001
    ew 100:da = 0xE1600070 // SMC   #0

    // Disable L2 cache by clearing bit 2 in cp15 auxiliary control register
    ew $tempvar = @cp15_auxctl
    ew $tempvar2 = (@$tempvar & 0xFFFFFFFD)
    ew cp15_auxctl = @$tempvar2 

    //
    dv "Initializing target done.\n"
    return

//___________________________________________________________________

// <eof>
