/* MDI Configuration File for EPI's MDILib interface */

/*****************************************************************************/
//  Configuration File Syntax
//
//  Configuration data is specified by keyword and value pairs.  Related
//  configuration data are specified in sections called "definitions" that
//  begin with the keyword "Define".  Examples of each type of definition
//  are given below, preceded by a comment block describing the syntax and
//  meaning of each configuration value that can be specified in that 
//  definition.  In the syntax descriptions, the keyword/value pairs are
//  shown as lines of the form
//
//      KeywordName  ValueName
//
//  A value name ending in "Number" represents a numeric value, conforming to
//  C language syntax.
//
//  A value name ending in "String" represents a string value.  The string
//  must be enclosed in double quotes ("), unless it is a valid identifier
//  according to C language rules: starts with alphabetic or underscore
//  character, and contains only alphanumeric and underscore characters.
//  NOTE: Quoted strings are parsed according to C language rules, where
//        backslash (\) is an "escape" character.  So if you want to use
//        backslash as a directory separator in a PathString value, it must
//        be entered as two backslashes ("c:\\epi\\mdi\\startice.cmd").  Or
//        you can use a forward slash instead ("c:/epi/mdi/startice.cmd").
//
//  All other value names are keywords and must be entered as shown, except
//  that upper/lower case is not significant.
//
//  The configuration file consists of an optional Global Definition, followed
//  by one or more Device Definitions, followed by one or more Controller
//  Definitions, followed by one or more DevName Definitions.
//
/*****************************************************************************/

/*****************************************************************************/
//  Global Definition Section
//      Provides configuration values not associated with a particular
//      target or connection.  This section is optional, but it is
//      strongly recommended that you specify at least the EDTPath value.
//
//  Syntax:
//
//  Define Global
//      Path		PathString
//      LogFile         LogPathString
//      CommandFile     CmdPathString
//      ConnectMode     { Reset | Halt | Run }
//
//  PathString is the full path name of the directory into which your
//  install package was installed.  It is used to locate various files needed
//  by the MDILib without having to add specific directories to the
//  PATH environment variable.
//
//  LogPathString is the full or relative path name of a file which will
//  have detailed session log information written to it.  This entry should
//  only be used when requested by EPI Technical Support.
//
//  CommandFile and ConnectMode are described in the comment block titled
//  "Common Values" at the end of this file.
//
/*****************************************************************************/
// Example:

Define Global
//      Path		"c:/Program Files/Code Bench/i686-mingw32/mips-sde-elf/mep"
//      LogFile         "mdidebug.log"
        CommandFile     "myboard.maj"

/*****************************************************************************/
//  Device Definition Section
//      Associates the device identification data required by the MDI
//      API with an arbitrary device name.
//      NOTE: EPI's MDILib sets Family and Class correctly by default, and
//      does not make use of any of these values except Endian, EPIcpuid,
//      and CommandFile.  Endian and EPIcpuid are required while CommandFile
//      can be specified in any relevant definition. For all other entries,
//      you are free to supply whatever values your debugger may be expecting
//      or omit them if your debugger also ignores them.  For example,
//      mdi-server (the GDB remote protocol server) requires FISA to be
//      specified for MIPS targets.
//
//  Syntax:
//
//  Define Device DevIDString
//      Family          FamilyString
//      Class           ClassString
//      ISA             ISAString			!
//      Part            PartString			!
//      Vendor          VendorString			!
//      VendorFamily    VendorFamilyString		!
//      VendorPart      VendorPartString		!
//      VendorPartRev   VendorPartRevisionString	!
//      VendorPartData  VendorPartDataString		!
//      Endian          { Big | Little }
//      CPUId		CPUString
//      CommandFile     CmdPathString
//      ConnectMode     { Reset | Halt | Run }
//      CoreAccessSel   0..32 
//
//  The Endian value specifies the organization of the target memory system.
//  "Big" means 
//
//  The CPUString value is the Sourcery Probe specific CPU type as specified with the
//  "-v" command line option when running an EPI debugger.
//
//  CoreAccessSel corresponds to MON's -c option.  This optional parameter is 
//  valid only on multi-core environments and signals which core to connect to.
//  Note that this option can be overriden in the startup script referenced in
//  command file. A value of 0 is the same as no selection.
//  This setting is also valid in the MDIDeviceList section.  A value here
//  overrides any MDIDeviceList setting.
//
//  CommandFile and ConnectMode are described in the comment block titled
//  "Common Values" at the end of this file.
//
//  Items marked with a ! are not functional and only serve as informational
//
/*****************************************************************************/
// Examples:

Define Device MTI74KBig
        Family          "CPU"
        Class           "MIPS"
        Part            "74Kc"
        Endian          Big
        CPUId          "74Kc"
        CommandFile     "myboard.maj"

Define Device MTI74KLittle
        Family          "CPU"
        Class           "MIPS"
        Part            "74Kc"
        Endian          Little
        CPUId          "74Kc"
        CommandFile     "myboard.maj"

Define Device LR4102Big
        Family          "CPU"
        Class           "MIPS"
        Part            "LR4102"
        Endian          Big
        CPUId           "4102"
        CommandFile     "lr4102.maj"

Define Device LR4102Little
        Family          "CPU"
        Class           "MIPS"
        Part            "LR4102"
        Endian          Little
        CPUId           "4102"
        CommandFile     "lr4102.maj"

Define Device LR4021Big
        Family          "CPU"
        Class           "MIPS"
        Part            "LR4021"
        Endian          Big
        CPUId           "4021"
        CommandFile     "lr4201.maj"

Define Device LR4021Little
        Family          "CPU"
        Class           "MIPS"
        Part            "LR4021"
        Endian          Little
        CPUId           "4021"
        CommandFile     "lr4201.maj"


/*****************************************************************************/
//  Controller Definition Section
//      Associates a set of configuration information for a particular EPI 
//      development tool (ICE, RSS, ISS, etc) with an arbitrary controller
//      name.  The Port entry is required, Speed is optional, and CommandFile
//      is optional if it appears in the Global definition or the relevant
//      DevName or Device definitions.
//
//  Syntax:
//
//  Define Controller ControllerIDString
//      Port            PortString
//      CommandFile     CmdPathString
//      ConnectMode     { Reset | Halt | Run }
//
//  PortString is the EPI-specific device name used to communicate with
//  the ICE or RSS debug kernel, as specified with the "-d" command line 
//  option when running an EPI debugger.
//
//  CmdPathString is the full or relative path name of a startup command file
//  that will be processed automatically when a device is opened which does
//  not specify a more specific CommandFile value in its DevName or Device
//  definition.  If CommandFile is specified here, the value overrides a
//  value specified in the Global definition.
//  See the comments for the Global definition section for more information
//  about CommandFile.
//
/*****************************************************************************/
// Examples:

Define Controller Sourcery_Probe1
        Port            "192.168.10.15"

Define Controller Sourcery_Probe2
        Port            "192.168.10.16"


/*****************************************************************************/
//  DevName Definition Section
//      Defines the set of named devices that are available to be connected to.
//      Each "DevName" consists of an identifying string that the debugger
//      will display when allowing the user to select what target system they
//      want to connect to, the corresponding Device and Controller definition
//      to use for the connection, and optionally a startup command file to
//      use for the connection.
//
//  Syntax:
//
//  Define MDIDeviceList
//      DevName     DevNameString
//          Device        DevIDString
//          Controller    ControllerIDString
//          CommandFile   CmdPathString
//          ConnectMode   { Reset | Halt | Run }
//	    CoreAccessSel 0..32 
//      ...
//
//  DevNameString is the descriptive string that will be passed to the
//  debugger for display to the user to identify the connection.  Each
//  DevName entry should have a unique DevNameString value.
//
//  DevIDString and ControllerIDString are the IDString values of the
//  Device and Controller definitions used to configure the connection.
//
//  CmdPathString is the full or relative path name of a startup command file
//  that will be processed automatically when the device is opened.  If
//  CommandFile is specified here, the value overrides values specified in the
//  Global, Controller, and Device definitions.
//  See the comments for the Global definition section for more information
//  about CommandFile.
//
//  CoreAccessSel corresponds to MON's -c option.  This optional parameter is 
//  valid only on multi-core environments and signals which core to connect to.
//  Note that this option can be overriden in the startup script referenced in
//  command file. A value of 0 is the same as no selection.
//  Note a CoreAccessSel setting in a referenced Device Definition Section overrides any
//  setting here.
//
/*****************************************************************************/
// Example:

Define MDIDeviceList
    DevName         "MTI74K Big Endian via SP1"
        Device          MTI74KBig
        Controller      Soucery_Probe1

    DevName         "MTI74K Little Endian via SP1"
        Device          MTI74KLittle
        Controller      Soucery_Probe2

    DevName         "LR4102 Big Endian via SP1"
        Device          LR4102Big
        Controller      Soucery_Probe1

    DevName         "LR4102 Big Endian via SP2"
        Device          LR4102Big
        Controller      Soucery_Probe2

    DevName         "LR4102 Big Endian via COM1"
        Device          LR4102Big
        Controller      Soucery_Probe1



/*****************************************************************************/
//  Common Values
//
//  While most configuration values are specified only in a particular
//  type of Definition section, the following values are valid in any
//  type.  If a particular value is defined in more than one Definition
//  associated with a DevName, the value that applies is determined by 
//  precedence:  The value specified in the DevName Definition itself has
//  highest precedence, followed by the Device Definition, then the
//  Controller Definition, and finally the Global Definition.
//
//  Startup Command File
//
//  Syntax:
//
//      CommandFile     CmdPathString
//
//  CmdPathString is the full or relative path name of a default startup
//  command file that will be processed automatically when a device is
//  opened.
//
//  The startup command file is intended to contain commands that will
//  properly initialize and configure the target system, as is done by the
//  "startice.cmd" file automatically run at startup by EPI debuggers.
//
//  The CommandFile entry is optional in every definition type, but at least
//  one applicable value is required for every DevName definition.
//
//  Connection Mode
//
//  Syntax:
//
//      ConnectMode     { Reset | Halt | Run }
//
//  The MDI 1.0 specification does not describe what state the debugger 
//  should expect the target system to be in when the inital connection is
//  made.  Some debuggers may assume that the target is forced to a known
//  state (reset or halted) on connection, while others may query the status
//  and support the possibility that the target is already running at connect
//  time.
//
//  The ConnectMode value controls what effect connecting to a target should
//  have on its state.  "Reset" means reset the target unconditionally,
//  "Halt" means halt the target if it is running but make no other changes,
//  and "Run" means connect without affecting the target execution (if
//  possible).
//
//  The ConnectMode entry is optional in every definition type.  If there is
//  no applicable value for a DevName definition, the default behavior is
//  "Reset".
//
/*****************************************************************************/

