+q  // Enter quiet mode
//___________________________________________________________________
//
//               Copyright (c) 2012 Mentor Graphics Corporation
//                           All rights reserved
//
//   THIS WORK CONTAINS TRADE SECRETS AND PROPRIETARY INFORMATION WHICH IS
//    THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS
//                        SUBJECT TO LICENSE TERMS.
//
//___________________________________________________________________
//
// Mentor Embedded Sourcery Probe target initialization file for the
// TI DM814XEVM platform.  It supports this platform as-is,
// and can be adapted to a new target based on this reference board,
// as detailed below.  For a brand new custom board not related to
// this reference board, it may be better to start from the template
// rather than trying to adapt this file.
//
// Target Description:
//
//     Board:   TI DM814XEVM
//     Device:  TI DM8148
//     CPU ID:  CORTEX-A8
//     Endian:  Little
//     Cores:   1
//
// Porting Guide:
//
// The user should make the following adaptations to port this file
// to a new target board based on the associated reference platform:
//
//        0. Review the MEP Probe Initialization section at
//           "TO DO #0" below to make sure the settings are
//           right for your board.
//        1. Update the memory configuration table for changes
//           in the new board's  *Physical*  memory map.  See
//           'TO DO #1' below.
//        2. If your target board requires any special MEP
//           settings, they should be added to the end of the
//           ONE_TIME_SETUP section.  See 'TO DO #2' below.
//        3. Decide whether the target should be automatically
//           reset and/or initialized upon start-up by choosing
//           the desired command at 'TO DO #3' below.  This
//           really depends on your use case.
//        4. If the board has no boot code (or bad boot code),
//           and you want to download into RAM, then you may
//           have to adapt the memory controller initialization
//           script at 'TO DO #4' below to account for changes
//           relative to the reference platform.
//        5. If you care about programming your target's NOR
//           Flash, then review the Flash Initialization section at
//           "TO DO #5" below to add any special flash unlock code
//           that may be needed.
//
// NOTE:  Additional information on MON commands and the configuration
//        options used here is available in the online help system.
//___________________________________________________________________
dv "Reading $$# ...\n"


// Initialization script preparation
// =================================

// The RTI, RTNI, and TI command aliases call script functions in this file.
// These command aliases should never be changed.

ea RTI   $$#.DO_RTI  // RTI  call DO_RTI script function  (Reset Target and Initialize)
ea RTNI  $$#.DO_RTNI // RTNI call DO_RTNI script function (Reset Target with No Initialization)
ea TI    $$#.DO_TI   // TI   call DO_TI script function   (Target Initialize without resetting)

// Some SoC specific registers are defined in the register definition file below.
//fwo o log_jtagv_m3
//fr c support
//meplog_jtagv
fr rd dm814xevmm3.rd

// MEP Probe Initialization
// ==========================

// TO DO #0 -- Review the following MEP configuration options to make
//             sure they are right for your target board hardware and
//             processor device design.

// The  Trgt_Resets_JTAG  option informs the MEP probe whether the target
// board will forward a system reset (nSRST) to the JTAG interface (nTRST),
// or reset the system only without resetting the JTAG interface.  When in
// doubt, a YES setting is safer.  When the two reset circuits are known
// to be independent, which is strongly recommended, then a NO setting is
// recommended.

eo Trgt_Resets_JTAG  = yes

// The  Ice_JTAG_Use_RTCLK  and  Ice_JTAG_Clock_Freq  options are related
// and must be considered together.  An  Ice_JTAG_Use_RTCLK  setting of
// ON  selects adaptive clocking mode, where the JTAG clock is dynamically
// controlled by the target processor.  When  Ice_JTAG_Use_RTCLK  is set
// OFF  then normal (unthrottled) clocking is selected.
//
// When adaptive clocking is disabled, the  Ice_JTAG_Clock_Freq  option
// specifies the the JTAG clock (TCK) frequency in Megahertz, from
// 0.002 to 100 (depending on probe hardware capability).  A lower setting
// is safer, a higher setting yields higher performance.  Note that the
// requested frequency will be adjusted down to the closest frequency
// supported by the probe hardware (displaying this option will show the
// actual TCK frequency).
//
//     IJUR  Clock mode
//     ====  ========================
//     OFF   Free running TCK at specified frequency (RTCK is ignored)
//     ON    Adaptive clocking with frequency controlled by RTCK
//           (Ice_JTAG_Clock_Freq is ignored)
//
// For Virtual MESP, both options should be removed.
//
// Note that enabling  Ice_JTAG_Use_RTCLK  on target boards that do not
// drive the RTCK signal will lock up the JTAG interface.

eo Ice_JTAG_Use_RTCLK  = off
eo Ice_JTAG_Clock_Freq = 10
if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

// The following command can be used to define the details of the JTAG
// daisy chain.  It is only required for targets on which the MEP
// auto-detection algorithm cannot correctly determine the JTAG connection
// details.  On most boards this command can be omitted.
//
//    ew MEP_JTAG_DIMENSION = TAP_CNT, IR1_CNT [ , IR2_CNT ]  ...
ew MEP_JTAG_DIMENSION = 2,4,6

// The following commands can be used to define special JTAG initialization
// operations required by certain processors.  The first one, if defined,
// is scanned in right after the JTAG reset cycle completes, but before the
// standard JTAG initialization performed by the MEP.  The second, if
// defined, is scanned in right after the standard JTAG initialization
// performed by the MEP.  On most boards these can both be omitted.
//
//    ew MEP_JTAG_INIT0 = <scan-op> [ , <scan-op> ]  ...
//    ew MEP_JTAG_INIT1 = <scan-op> [ , <scan-op> ]  ...
//

//                  IR P 6,   IR=7,     DR P 8,   DR = 8.   IR P 6,   IR = 2,   DR P 32,  aP002108  IR P 6,   IR = 2,   DR P 32,  eQ002008, IR 6,     IR = 3f,  extra TCK files
//ew MEP_JTAG_INIT0 = 89000006, 00000007, 09000008, 00000089, 89000006, 00000002, 09000020, ac002108, 89000006, 00000002, 09000020, e0002008, 81000006, 0000003f, 81000020, ffffffff

ew MEP_JTAG_INIT0 = 89000006, 00000007, 09000008, 00000089, 89000006, 00000002, 09000020, a9002108, 89000006, 00000002, 09000020, f9002008, 81000006, 0000003f, 81000020, ffffffff

// Core Sight access details for DM814xEVM must be preset here as the target
// does not support automatic scanning of the debug access ports.

ew CORTEX_AHB_AP_SEL_NUM=3	
ew CORTEX_APB_AP_SEL_NUM=3
ew CORTEX_M_SCS_BASE_ADR=0xe000e000
ew CORTEX_M_DWT_BASE_ADR = 0xe0001000
ew CORTEX_M_FPB_BASE_ADR = 0xe0002000

// The  Ice_Power_Sense  option enables the target power monitor.  When
// target power is detected, the debug interface is enabled.

eo Ice_Power_Sense = VREF

// The  Ice_JTAG_TAP_Select  option controls which TAP on a multi-TAP
// daisy chain is associated with this debug connection.  This option
// can be omitted on targets which have one TAP.  Note that TAPs are
// numbered from 1-N, with TAP 1 being the one whose TDO is connected
// to the MEP probe.
//
//    eo Ice_JTAG_TAP_Select = <num>
eo Ice_JTAG_TAP_Select = 1

// The  Ice_Multi_Session  option specifies whether the probe should accept
// multiple simultaneous debugger connections. This options needs to be set
// on target boards which have multiple cores that you wish to debug at the
// same time.  If multi-core debugger is not required, this option can be
// safely omitted. 
//
// Ice_Multi_Session is left disabled because this target only supports connection
// to one core at a time

//eo Ice_Multi_Session = on

// Target connection command
tc

// Flash Initialization
//
// TO DO #5 --  If your target board requires any special initialization
//              commands to prepare for running the targetflash programming
//              utility, add those commands here.
//
//              example:  ea FLASH_INIT ew 0xa0020800 = 0x10101010; ew 0xa0020818 = 0x10101010

ea FLASH_INIT  /* nothing special required */


// Physical Memory Configuration
// =============================

mc *:P, inv     // start with all *physical* memory (*:P) marked as invalid

// TO DO #1 -- Change the address range(s) below to match the  *physical*
//             address ranges of your ROM/flash and RAM areas.  Add more
//             MC commands as necessary for each memory mapped area.
//
// WARNING:  DO NOT confuse virtual (MVA) addresses with physical space.
//           Make sure to use physical addresses in the MC table.
//
// EXAMPLE:
//
//     mc  ________:P  ________:P,  PWE, JAM, RW    // DRAM
//     mc  ________:P  ________:P,  PWD, JAM, RO    // Flash or ROM
//     mc  ________:P  ________:P,  PWD, JAM, RW    // Peripheral registers
//
// Note that if your boot code remaps physical memory, then the MC table
// should reflect the mapping that is in effect for the code you are trying
// to debug.  When debugging boot code in flash, MC should match the mapping
// in effect when booting.  When debugging code in RAM, MC should match the
// mapping in effect when running code from RAM.

// Address Range          PWE  Access
// ---------------------- ---- -------
//Note: These settings reflect theoratical maximum values as described 
//in Cortex M3 technical reference manual and not the actual sizes installed
//on any particular board. 
mc 00000000:P 1FFFFFFF:P, PWE, DMA, RW  // half GB Code space

mc 0x01000000:P 0x1FFFFFFF:P, DMA, RW      // GPMC

mc 20000000:P 3FFFFFFF:P, PWE, DMA, RW	// half GB SRAM

mc 40000000:P 43FFFFFF:P, PWE, DMA, RW  //peripheral space

mc 0x44000000:P 0x443FFFFF:P, PWD, DMA, RW      // L3 Fast Configuration Registers
mc 0x44400000:P 0x447FFFFF:P, PWD, DMA, RW      // L3 Mid Configuration Registers
mc 0x44800000:P 0x44BFFFFF:P, PWD, DMA, RW      // L3 Slow Configuration Registers
mc 0x46000000:P 0x463FFFFF:P, PWD, DMA, RW      // McASP0
mc 0x46400000:P 0x467FFFFF:P, PWD, DMA, RW      // McASP1
mc 0x46800000:P 0x46BFFFFF:P, PWD, DMA, RW      // McASP2
mc 0x46C00000:P 0x46FFFFFF:P, PWD, DMA, RW      // HDMI
mc 0x47000000:P 0x473FFFFF:P, PWD, DMA, RW      // McBSP
mc 0x47400000:P 0x477FFFFF:P, PWE, DMA, RW      // USB
mc 0x47810000:P 0x47811FFF:P, PWD, DMA, RW      // MMC/SD/SDIO2 Peripheral Registers
mc 0x47C0C400:P 0x47C0C7FF:P, PWD, DMA, RW      // DDR0 PHY Registers
mc 0x47C0C800:P 0x47C0CBFF:P, PWD, DMA, RW      // DDR1 PHY Registers
mc 0x48000000:P 0x48FFFFFF:P, PWD, DMA, RW      // L4 Slow Peripheral Domain Registers
mc 0x49000000:P 0x490FFFFF:P, PWD, DMA, RW      // EDMA TPCC Registers
mc 0x49800000:P 0x498FFFFF:P, PWD, DMA, RW      // EDMA TPTC0 Registers
mc 0x49900000:P 0x499FFFFF:P, PWD, DMA, RW      // EDMA TPTC1 Registers
mc 0x49A00000:P 0x49AFFFFF:P, PWD, DMA, RW      // EDMA TPTC2 Registers
mc 0x49B00000:P 0x49BFFFFF:P, PWD, DMA, RW      // EDMA TPTC3 Registers
mc 0x4A000000:P 0x4AFFFFFF:P, PWD, DMA, RW      // L4 Fast Peripheral Domain
mc 0x4B000000:P 0x4BFFFFFF:P, PWD, DMA, RW      // Emulation Subsystem
mc 0x4C000000:P 0x4CFFFFFF:P, PWD, DMA, RW      // DDR0 Registers
mc 0x4D000000:P 0x4DFFFFFF:P, PWD, DMA, RW      // DDR1 Registers
mc 0x4E000000:P 0x4FFFFFFF:P, PWD, DMA, RW      // DDR DMM Registers
mc 0x50000000:P 0x50FFFFFF:P, PWD, DMA, RW      // GPMC Registers
mc 0x51000000:P 0x51FFFFFF:P, PWD, DMA, RW      // PCIE Registers
mc 0x55000000:P 0x55FFFFFF:P, PWD, DMA, RW      // Media Controller
mc 0x56000000:P 0x56FFFFFF:P, PWD, DMA, RW      // SGX530
mc 0x58000000:P 0x58FFFFFF:P, PWD, DMA, RW      // HDVICP2 Configuration
mc 0x59000000:P 0x59FFFFFF:P, PWD, DMA, RW      // HDVICP2 SL2
mc 0x5C000000:P 0x5DFFFFFF:P, PWD, DMA, RW      // ISS
mc 0x60000000:P 0x7FFFFFFF:P, PWD, DMA, RW      // DDR DMM Tiler Window 
mc 0x80000000:P 0xFFFFFFFF:P, PWE, DMA, RW      // DDR RAM

//        ____User Supplied Setup Commands Go Here____

// TO DO #2 -- If your target board requires any special MEP settings
//             (e.g. special JTAG initialization), add the commands to
//             make those settings here.


// End of initial one-time only setup script.  In non-intrusive connect
// mode, exit at this point.

if (@.4$INIT_TYPE != 0) {dv "Non-intrusive attach connection\n"; goto EXIT}
if (@$trgt_cpu_state != $tcs.halt) {dv "Debug connection failed, "; doq TCS; goto EXIT}

// TO DO #3 -- Comment out all but one of the next three commands to
//             control IF and HOW the target is initialized when the
//             debugger is launched.  If no reset or target initialization
//             is needed then all these can be left commented out.

TI
//   RTI
//   RTNI

:EXIT
dv "Finished reading $$#.\n"
return

//___________________________________________________________________
::DO_RTNI  // Reset Target with No Initialization.

    // Normally an  rt  command is sufficient, but it may be necessary
    // to slow down the JTAG clock first, depending on the affect of
    // reset on the processor.

    dv "Executing RTNI script function\n"
    rt
    return

//___________________________________________________________________
::DO_RTI   // Reset Target and Initialize.

    // Note that it may be necessary to slow down the JTAG clock first, 
    // depending on the affect of reset on the processor.

    dv "Executing RTI script function\n"
    rt
    TI  // call script DO_TI function
    return

//___________________________________________________________________
::DO_TI  // Target Initialize.

    if (@$trgt_cpu_state != $tcs.halt) { dv "Target Initialization commands skipped due to CPU state\n"; doq TCS; return }
    dv "Initializing target...\n"


dv  "Starting Initialization for DM8148\n"


    dv "Initializing target done.\n"
    return
//___________________________________________________________________

// <eof>
