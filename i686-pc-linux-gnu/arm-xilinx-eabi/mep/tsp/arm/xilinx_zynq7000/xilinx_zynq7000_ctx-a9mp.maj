+q  // Enter quiet mode
//___________________________________________________________________
//
//               Copyright (c) 2011 Mentor Graphics Corporation
//                           All rights reserved
//
//   THIS WORK CONTAINS TRADE SECRETS AND PROPRIETARY INFORMATION WHICH IS
//    THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS
//                        SUBJECT TO LICENSE TERMS.
//
//___________________________________________________________________
//
// Mentor Embedded Sourcery Probe target initialization file for the
// Xilinx ZYNQ7000 reference platform.  It supports this platform as-is,
// and can be adapted to a new target based on this reference board,
// as detailed below.  For a brand new custom board not related to
// this reference board, it may be better to start from the template
// rather than trying to adapt this file.
//
// Target Description:
//
//     Board:   Xilinx ZYNQ7000 reference platform
//     Device:  Xilinx ZYNQ7000
//     CPU ID:  Cortex-A9
//     Endian:  Little
//     Cores:   2
//
// Porting Guide:
//
// The user should make the following adaptations to port this file
// to a new target board based on the associated reference platform:
//
//        0. Review the MEP Probe Initialization section at
//           "TO DO #0" below to make sure the settings are
//           right for your board.
//        1. Update the memory configuration table for changes
//           in the new board's  *Physical*  memory map.  See
//           'TO DO #1' below.
//        2. If your target board requires any special MEP
//           settings, they should be added to the end of the
//           ONE_TIME_SETUP section.  See 'TO DO #2' below.
//        3. Decide whether the target should be automatically
//           reset and/or initialized upon start-up by choosing
//           the desired command at 'TO DO #3' below.  This
//           really depends on your use case.
//        4. If the board has no boot code (or bad boot code),
//           and you want to download into RAM, then you may
//           have to adapt the memory controller initialization
//           script at 'TO DO #4' below to account for changes
//           relative to the reference platform.
//
// NOTE:  Additional information on MON commands and the configuration
//        options used here is available in the online help system.
//___________________________________________________________________
dv "Reading $$# ...\n"


// Initialization script preparation
// =================================

// The RTI, RTNI, and TI command aliases call script functions in this file.
// These command aliases should never be changed.

ea RTI   $$#.DO_RTI  // RTI  call DO_RTI script function  (Reset Target and Initialize)
ea RTNI  $$#.DO_RTNI // RTNI call DO_RTNI script function (Reset Target with No Initialization)
ea TI    $$#.DO_TI   // TI   call DO_TI script function   (Target Initialize without resetting)

ew $temp = @.1db000000:DA   // Use back-door method to find probe type
if (@$temp == 1) {ew $vprobe = 1; p 0xffffffff 1} /* else */ { ew $vprobe = 0 }


// MEP Probe Initialization
// ==========================

// TO DO #0 -- Review the following MEP configuration options to make
//             sure they are right for your target board hardware and
//             processor device design.

// The  Trgt_Resets_JTAG  option informs the MEP probe whether the target
// board will forward a system reset (nSRST) to the JTAG interface (nTRST),
// or reset the system only without resetting the JTAG interface.  When in
// doubt, a YES setting is safer.  When the two reset circuits are known
// to be independent, which is strongly recommended, then a NO setting is
// recommended.
//
// For Virtual MESP, this option should be skipped as it is not supported.

if (@$vprobe == 0) {eo Trgt_Resets_JTAG  = no}

// The  Ice_JTAG_Use_RTCLK  and  Ice_JTAG_Clock_Freq  options are related
// and must be considered together.  An  Ice_JTAG_Use_RTCLK  setting of
// ON  selects adaptive clocking mode, where the JTAG clock is dynamically
// controlled by the target processor.  When  Ice_JTAG_Use_RTCLK  is set
// OFF  then normal (unthrottled) clocking is selected.
//
// When adaptive clocking is disabled, the  Ice_JTAG_Clock_Freq  option
// specifies the the JTAG clock (TCK) frequency in Megahertz, from
// 0.002 to 100 (depending on probe hardware capability).  A lower setting
// is safer, a higher setting yields higher performance.  Note that the
// requested frequency will be adjusted down to the closest frequency
// supported by the probe hardware (displaying this option will show the
// actual TCK frequency).
//
//     IJUR  Clock mode
//     ====  ========================
//     OFF   Free running TCK at specified frequency (RTCK is ignored)
//     ON    Adaptive clocking with frequency controlled by RTCK
//           (Ice_JTAG_Clock_Freq is ignored)
//
// For Virtual MESP, these options should be skipped as they are not supported.
//
// Note that enabling  Ice_JTAG_Use_RTCLK  on target boards that do not
// drive the RTCK signal will lock up the JTAG interface.

if (@$vprobe == 1) {goto SKIP_CLOCK}
eo Ice_JTAG_Use_RTCLK  = off
eo Ice_JTAG_Clock_Freq = 20
if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}
:SKIP_CLOCK

// The following command can be used to define the details of the JTAG
// daisy chain.  It is only required for targets on which the MEP
// auto-detection algorithm cannot correctly determine the JTAG connection
// details.  On most boards this command can be omitted.
//
//    ew MEP_JTAG_DIMENSION = TAP_CNT, IR1_CNT [ , IR2_CNT ]  ...

ew MEP_JTAG_DIMENSION = 1, 4

// The following commands can be used to define special JTAG initialization
// operations required by certain processors.  The first one, if defined,
// is scanned in right after the JTAG reset cycle completes, but before the
// standard JTAG initialization performed by the MEP.  The second, if
// defined, is scanned in right after the standard JTAG initialization
// performed by the MEP.  On most boards these can both be omitted.
//
//    ew MEP_JTAG_INIT0 = <scan-op> [ , <scan-op> ]  ...
//    ew MEP_JTAG_INIT1 = <scan-op> [ , <scan-op> ]  ...

// The  Ice_Power_Sense  option enables the target power monitor.  When
// target power is detected, the debug interface is enabled.

if (@$vprobe == 0) {eo Ice_Power_Sense = VREF}

// The  Ice_JTAG_TAP_Select  option controls which TAP on a multi-TAP
// daisy chain is associated with this debug connection.  This option
// can be omitted on targets which have one TAP.  Note that TAPs are
// numbered from 1-N, with TAP 1 being the one whose TDO is connected
// to the MEP probe.

eo Ice_JTAG_TAP_Select = 1 

// The  Ice_Multi_Session  option specifies whether the probe should accept
// multiple simultaneous debugger connections. This options needs to be set
// on target boards which have multiple cores that you wish to debug at the
// same time.  If multi-core debugging is not required, this option can be
// safely omitted. 

eo Ice_Multi_Session = on

// Target connection command
tc

// Physical Memory Configuration
// =============================

mc *:P, inv     // start with all *physical* memory (*:P) marked as invalid

// TO DO #1 -- Change the address range(s) below to match the  *physical*
//             address ranges of your ROM/flash and RAM areas.  Add more
//             MC commands as necessary for each memory mapped area.
//
// WARNING:  DO NOT confuse virtual (MVA) addresses with physical space.
//           Make sure to use physical addresses in the MC table.
//
// EXAMPLE:
//
//     mc  ________:P  ________:P,  PWE, JAM, RW    // DRAM
//     mc  ________:P  ________:P,  PWD, JAM, RO    // Flash or ROM
//     mc  ________:P  ________:P,  PWD, JAM, RW    // Peripheral registers
//
// Note that if your boot code remaps physical memory, then the MC table
// should reflect the mapping that is in effect for the code you are trying
// to debug.  When debugging boot code in flash, MC should match the mapping
// in effect when booting.  When debugging code in RAM, MC should match the
// mapping in effect when running code from RAM.
//
// Address Range          PWE  Access
// ---------------------- ---- -------
mc 00000000:P 0FFFFFFF:P, PWE, JAM, RW  // DDR  (after initialization)
mc F8000000:P F8FFFFFF:P, PWD, JAM, RW  // Control registers
mc FFFC0000:P FFFFFFFF:P, PWE, JAM, RW  // SRAM (after initialization)


//        ____User Supplied Setup Commands Go Here____

// TO DO #2 -- If your target board requires any special MEP settings
//             (e.g. special JTAG initialization), add the commands to
//             make those settings here.


// End of initial one-time only setup script.  If this is a non-intrusive
// attach connection, or if a normal debug connection fails to connect
// properly, then exit at this point.  Otherwise continue on with optional
// additional initialization.

if (@.4$INIT_TYPE != 0) {dv "Non-intrusive attach connection\n"; goto EXIT}
if (@$trgt_cpu_state != $tcs.halt) {dv "Debug connection failed, "; doq TCS; goto EXIT}

// TO DO #3 -- Comment out all but one of the next three commands to
//             control IF and HOW the target is initialized when the
//             debugger is launched.  If no reset or target initialization
//             is needed then all these can be left commented out.

//   TI
RTI
//   RTNI
// The semihosting vector is +8 from the vector area base address, which
// on Cortex-A9 is configurable via the system coprocessor.  This option
// is required for hosted mode applications, and ignored for unhosted
// mode.

ew $semi_hosting_vector = @cp15_snvba + 8
:EXIT
dv "Finished reading $$#.\n"
return

//___________________________________________________________________
::DO_RTNI  // Reset Target with No Initialization.

    if (@$vprobe) {dv "RTNI is not supported by this probe\n"; return}

    // Normally an  rt  command is sufficient, but it may be necessary
    // to slow down the JTAG clock first, depending on the affect of
    // reset on the processor.

    dv "Executing RTNI script function\n"
    rt
    return 

//___________________________________________________________________
::DO_RTI   // Reset Target and Initialize.

    if (@$vprobe) {dv "RTI is not supported by this probe\n"; return}

    // Note that it may be necessary to slow down the JTAG clock first, 
    // depending on the affect of reset on the processor.

    dv "Executing RTI script function\n"
    rt
    TI	// call script DO_TI function
    return

//___________________________________________________________________
::DO_TI  // Target Initialize.

    if (@$trgt_cpu_state != $tcs.halt) { dv "Target Initialization commands skipped due to CPU state\n"; doq TCS; return }
    dv "Initializing target...\n"

    //  Memory Controller Setup
    //
    // TO DO #4 -- If your board has a different memory configuration than
    //             the reference board, then you may need to adapt the
    //             memory controller initialization script accordingly.
    //             These settings should match the settings used by your
    //             boot code during its hardware initialization phase.

    ew 0xF8006004 = 0x000C1061	// ;#1
    ew 0xF8006014 = 0x00040CD6	// ;#5
    ew 0xF8006018 = 0x049B48CD	// ;#6
    ew 0xF800601c = 0x80615884	// ;#7
    ew 0xF8006020 = 0x250842CB	// ;#8
    ew 0xF8006028 = 0x00809004	// ;#10
    ew 0xF800602c = 0x00000000	// ;#11
    ew 0xF8006030 = 0x00060B62	// ;#12
    ew 0xF8006034 = 0x00020022	// ;#13
    ew 0xF800603c = 0x00000F88	// ;#15 - Use entire 256MB DDR memory
    ew 0xF8006040 = 0xFF000000	// ;#16
    ew 0xF8006044 = 0x0FF33333	// ;#17

    ew 0xF8006050 = 0x00000256	// ;#20
    ew 0xF800605c = 0x00002223	// ;#23
    ew 0xF80060A4 = 0x10200800	// ;#41
    ew 0xF80060B8 = 0x00200065	// ;#46
    ew 0xF800617c = 0x00000050	// ;#95
    ew 0xF8006180 = 0x00000050	// ;#96
    ew 0xF8006184 = 0x00000050	// ;#97
    ew 0xF8006188 = 0x00000050	// ;#98
    ew 0xF8006200 = 0x00000000	// ;#128
    
    // enble ddr controller
    ew 0xF8006000 = 0x00000201	// ;#0   

    // remap DDR memory to 0x0

    ew 0xF8F00000 = 0x0
    ew 0xF8F00040 = 0x0
    ew 0xF8F00000 = 0x2


//    peep5   { set SLCR_BASE_ADDR   "F8000000"
//              set LOCK_KEY_VALUE   "767B"
//              set UNLOCK_KEY_VALUE "DF0D"
//              set SAMCONF_DEFAULT  "00000000"
//              set RESET_AVAIL       1
//              set SAMCONF_AVAIL     1 
//              set DDRC_AVAIL        1       
//              set DDRC_BASE_ADDR   "F8006000"
//              set USER_AVAIL        1 
//              set DDR_NONSEC        0 
//              set DDR_TZCTRL_DATA "FFFFFFFF"
//              set FPGA_RST_CTRL_DATA "00000000"}

    // remap SRAM to FFFC0000
    ew 0xF8000008 = 0xDF0D, 0, 0n32		// unlock key
    ew 0xF8000910 = 0x1ff				// Remap all four 64k blocks to 0xfffc0000
    ew 0xF8000000 = 0x767B, 0, 0n32		// unlock key

    //        ____User Supplied Target Init Commands Go Here____

    dv "Initializing target done.\n"
    return

//___________________________________________________________________

// <eof>
