+q  // Enter quiet mode
//___________________________________________________________________
//
//               Copyright (c) 2011 Mentor Graphics Corporation
//                           All rights reserved
//
//   THIS WORK CONTAINS TRADE SECRETS AND PROPRIETARY INFORMATION WHICH IS
//    THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS
//                        SUBJECT TO LICENSE TERMS.
//
//___________________________________________________________________
//
// Mentor Embedded Sourcery Probe target initialization file for the
// Freescale i.MX6Q SABRE Lite platform.  It supports this platform as-is,
// and can be adapted to a new target based on this reference board,
// as detailed below.  For a brand new custom board not related to
// this reference board, it may be better to start from the template
// rather than trying to adapt this file.
//
// Target Description :
//
//     Board:   Freescale i.MX6Q SABRE Lite
//     Device:  Freescale i.MX6Q 1 (PCIMX6Q6AVT10AA)
//     CPU ID:  Cortex-A9
//     Endian:  Little
//     Cores:   4
//
// Porting Guide:
//
// The user should make the following adaptations to port this file
// to a new target board based on the associated reference platform:
//
//        0. Review the MEP Probe Initialization section at
//           "TO DO #0" below to make sure the settings are
//           right for your board.
//        1. Update the memory configuration table for changes
//           in the new board's  *Physical*  memory map.  See
//           'TO DO #1' below.
//        2. If your target board requires any special MEP
//           settings, they should be added to the end of the
//           ONE_TIME_SETUP section.  See 'TO DO #2' below.
//        3. Decide whether the target should be automatically
//           reset and/or initialized upon start-up by choosing
//           the desired command at 'TO DO #3' below.  This
//           really depends on your use case.
//        4. If the board has no boot code (or bad boot code),
//           and you want to download into RAM, then you may
//           have to adapt the memory controller initialization
//           script at 'TO DO #4' below to account for changes
//           relative to the reference platform.
//        5. If you care about programming your target's NOR
//           Flash, then review the Flash Initialization section at
//           "TO DO #5" below to add any special flash unlock code
//           that may be needed.
//
// NOTE:  Additional information on MON commands and the configuration
//        options used here is available in the online help system.
//___________________________________________________________________
dv "Reading $$# ...\n"

// Initialization script preparation
// =================================

// The RTI, RTNI, and TI command aliases call script functions in this file.
// These command aliases should never be changed.

ea RTI   $$#.DO_RTI  // RTI  call DO_RTI script function  (Reset Target and Initialize)
ea RTNI  $$#.DO_RTNI // RTNI call DO_RTNI script function (Reset Target with No Initialization)
ea TI    $$#.DO_TI   // TI   call DO_TI script function   (Target Initialize without resetting)


// MEP Probe Initialization
// ==========================

// TO DO #0 -- Review the following MEP configuration options to make
//             sure they are right for your target board hardware and
//             processor device design.

// The  Trgt_Resets_JTAG  option informs the MEP probe whether the target
// board will forward a system reset (nSRST) to the JTAG interface (nTRST),
// or reset the system only without resetting the JTAG interface.  When in
// doubt, a YES setting is safer.  When the two reset circuits are known
// to be independent, which is strongly recommended, then a NO setting is
// recommended.

eo Trgt_Resets_JTAG  = yes

// The  Ice_JTAG_Use_RTCLK  and  Ice_JTAG_Clock_Freq  options are related
// and must be considered together.  An  Ice_JTAG_Use_RTCLK  setting of
// ON  selects adaptive clocking mode, where the JTAG clock is dynamically
// controlled by the target processor.  When  Ice_JTAG_Use_RTCLK  is set
// OFF  then normal (unthrottled) clocking is selected.
//
// When adaptive clocking is disabled, the  Ice_JTAG_Clock_Freq  option
// specifies the the JTAG clock (TCK) frequency in Megahertz, from
// 0.002 to 100 (depending on probe hardware capability).  A lower setting
// is safer, a higher setting yields higher performance.  Note that the
// requested frequency will be adjusted down to the closest frequency
// supported by the probe hardware (displaying this option will show the
// actual TCK frequency).
//
//     IJUR  Clock mode
//     ====  ========================
//     OFF   Free running TCK at specified frequency (RTCK is ignored)
//     ON    Adaptive clocking with frequency controlled by RTCK
//           (Ice_JTAG_Clock_Freq is ignored)
//
// Note that enabling  Ice_JTAG_Use_RTCLK  on target boards that do not
// drive the RTCK signal will lock up the JTAG interface.

eo Ice_JTAG_Use_RTCLK  = off
eo Ice_JTAG_Clock_Freq = 10
if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

// The following command can be used to define the details of the JTAG
// daisy chain.  It is only required for targets on which the MEP
// auto-detection algorithm cannot correctly determine the JTAG connection
// details.  On most boards this command can be omitted.
//
//    ew MEP_JTAG_DIMENSION = TAP_CNT, IR1_CNT [ , IR2_CNT ]  ...


ew MEP_JTAG_DIMENSION = 3,4,4,5 // ARMCS-DP (IR len=4), SDMA (IR len=4), SJC (IR len=5)

// The ice_jtag_scan_freeze option controls how the JTAG state machine
// waits when a scan operation suspends upon completion instead of
// returning to RT/Idle.  When ice_jtag_scan_freeze is on, it waits by
// remaining in IR/Scan or DR/Scan state while freezing TCK instead of
// visiting IR/Pause and DR/Pause states.

eo ice_jtag_scan_freeze = on

// The following commands can be used to define special JTAG initialization
// operations required by certain processors.  The first one, if defined,
// is scanned in right after the JTAG reset cycle completes, but before the
// standard JTAG initialization performed by the MEP.  The second, if
// defined, is scanned in right after the standard JTAG initialization
// performed by the MEP.  On most boards these can both be omitted.
//
//    ew MEP_JTAG_INIT0 = <scan-op> [ , <scan-op> ]  ...
//    ew MEP_JTAG_INIT1 = <scan-op> [ , <scan-op> ]  ...

// If cores 2,3,4 are not brought out of reset / uninitialized, then accessing 
// their debug controller regions results in CoreSight DAP error leading to the 
// probe connection failure. CONNECT_TO_ONLY_CORE_1 needs to be set to 1 in order
// to prevent this failure.
// If cores 2,3,4 are known to be out of reset / initialized before the probe 
// connection is attempted, then CONNECT_TO_ONLY_CORE_1 can be set to 0.  

ew CONNECT_TO_ONLY_CORE_1 = 1 

// The  Ice_Power_Sense  option enables the target power monitor.  When
// target power is detected, the debug interface is enabled.

eo Ice_Power_Sense = VREF

// The  Ice_JTAG_TAP_Select  option controls which TAP on a multi-TAP
// daisy chain is associated with this debug connection.  This option
// can be omitted on targets which have one TAP.  Note that TAPs are
// numbered from 1-N, with TAP 1 being the one whose TDO is connected
// to the MEP probe.
//
//    eo Ice_JTAG_TAP_Select = <num>
eo Ice_JTAG_TAP_Select = 1

// The  Ice_Multi_Session  option specifies whether the probe should accept
// multiple simultaneous debugger connections. This options needs to be set
// on target boards which have multiple cores that you wish to debug at the
// same time.  If multi-core debugging is not required, this option can be
// safely omitted. 
//

eo Ice_Multi_Session = on

// Target connection command
tc


// Flash Initialization
//
// TO DO #5 --  If your target board requires any special initialization
//              commands to prepare for running the targetflash programming
//              utility, add those commands here.
//
//              example:  ea FLASH_INIT ew 0xa0020800 = 0x10101010; ew 0xa0020818 = 0x10101010

ea FLASH_INIT  /* nothing special required */


// Physical Memory Configuration
// =============================

mc *:P, inv     // start with all *physical* memory (*:P) marked as invalid

// TO DO #1 -- Change the address range(s) below to match the  *physical*
//             address ranges of your ROM/flash and RAM areas.  Add more
//             MC commands as necessary for each memory mapped area.
//
// WARNING:  DO NOT confuse virtual (MVA) addresses with physical space.
//           Make sure to use physical addresses in the MC table.
//
// EXAMPLE:
//
//     mc  ________:P  ________:P,  PWE, JAM, RW    // DRAM
//     mc  ________:P  ________:P,  PWD, JAM, RO    // Flash or ROM
//     mc  ________:P  ________:P,  PWD, JAM, RW    // Peripheral registers
//
// Note that if your boot code remaps physical memory, then the MC table
// should reflect the mapping that is in effect for the code you are trying
// to debug.  When debugging boot code in flash, MC should match the mapping
// in effect when booting.  When debugging code in RAM, MC should match the
// mapping in effect when running code from RAM.
//
// Address Range          PWE  Access
// ---------------------- ---- -------
mc 00000000:P 00017FFF:P, PWE, JAM, RO  // Boot Rom
mc 00100000:P 008FFFFF:P, PWE, JAM, RW  // Peripherals
mc 00900000:P 009FFFFF:P, PWE, JAM, RW  // OCRAM
mc 00A00000:P 07FFFFFF:P, PWE, JAM, RW  // Peripherals
mc 08000000:P 0FFFFFFF:P, PWE, JAM, RW  // EIM - CS0 (NOR/SRAM)
mc 10000000:P FFFFFFFF:P, PWE, JAM, RW  // MMDC - DDR Controller.


//        ____User Supplied Setup Commands Go Here____

// TO DO #2 -- If your target board requires any special MEP settings
//             (e.g. special JTAG initialization), add the commands to
//             make those settings here.


// End of initial one-time only setup script.  If this is a non-intrusive
// attach connection, or if a normal debug connection fails to connect
// properly, then exit at this point.  Otherwise continue on with optional
// additional initialization.

if (@.4$INIT_TYPE != 0) {dv "Non-intrusive attach connection\n"; goto EXIT}
if (@$trgt_cpu_state != $tcs.halt) {dv "Debug connection failed, "; doq TCS; goto EXIT}

// TO DO #3 -- Comment out all but one of the next three commands to
//             control IF and HOW the target is initialized when the
//             debugger is launched.  If no reset or target initialization
//             is needed then all these can be left commented out.

   TI
//   RTI
//   RTNI

// The semihosting vector is +8 from the vector area base address, which
// on Cortex-A9 is configurable via the system coprocessor.  This option
// is required for hosted mode applications, and ignored for unhosted
// mode.
//

ew $semi_hosting_vector = @cp15_snvba + 8

:EXIT
dv "Finished reading $$#.\n"
return

//___________________________________________________________________
::DO_RTNI  // Reset Target with No Initialization.

    // Normally an  rt  command is sufficient, but it may be necessary
    // to slow down the JTAG clock first, depending on the affect of
    // reset on the processor.

    dv "Target Reset isn't supported.\n"
    //dv "Executing RTNI script function\n"
    //rt
    return

//___________________________________________________________________
::DO_RTI   // Reset Target and Initialize.

    // Note that it may be necessary to slow down the JTAG clock first,
    // depending on the affect of reset on the processor.

    dv "Target Reset isn't supported.\n"
    //dv "Executing RTI script function\n"
    //rt
    TI  // call script DO_TI function
    return

//___________________________________________________________________
::DO_TI  // Target Initialize.

    if (@$trgt_cpu_state != $tcs.halt) { dv "Target Initialization commands skipped due to CPU state\n"; doq TCS; return }
    dv "Initializing target...\n"

    //  Memory Controller Setup
    //
    // TO DO #4 -- If your board has a different memory configuration than
    //             the reference board, then you may need to adapt the
    //             memory controller initialization script accordingly.
    //             These settings should match the settings used by your
    //             boot code during its hardware initialization phase.

    //  ew addr = value
    //  ew addr = value
    //  ew addr = value
    //  ew addr = value

    //        ____User Supplied Target Init Commands Go Here____

    // Pin multiplexing configuration
    ew 0x020e05a8 = 0x00000030
    ew 0x020e05b0 = 0x00000030
    ew 0x020e0524 = 0x00000030
    ew 0x020e051c = 0x00000030
    ew 0x020e0518 = 0x00000030
    ew 0x020e050c = 0x00000030
    ew 0x020e05b8 = 0x00000030
    ew 0x020e05c0 = 0x00000030
    ew 0x020e05ac = 0x00020030
    ew 0x020e05b4 = 0x00020030
    ew 0x020e0528 = 0x00020030
    ew 0x020e0520 = 0x00020030
    ew 0x020e0514 = 0x00020030
    ew 0x020e0510 = 0x00020030
    ew 0x020e05bc = 0x00020030
    ew 0x020e05c4 = 0x00020030
    ew 0x020e056c = 0x00020030
    ew 0x020e0578 = 0x00020030
    ew 0x020e0588 = 0x00020030
    ew 0x020e0594 = 0x00020030
    ew 0x020e057c = 0x00020030
    ew 0x020e0590 = 0x00003000
    ew 0x020e0598 = 0x00003000
    ew 0x020e058c = 0x00000000
    ew 0x020e059c = 0x00003030
    ew 0x020e05a0 = 0x00003030
    ew 0x020e0784 = 0x00000030
    ew 0x020e0788 = 0x00000030
    ew 0x020e0794 = 0x00000030
    ew 0x020e079c = 0x00000030
    ew 0x020e07a0 = 0x00000030
    ew 0x020e07a4 = 0x00000030
    ew 0x020e07a8 = 0x00000030
    ew 0x020e0748 = 0x00000030
    ew 0x020e074c = 0x00000030
    ew 0x020e0750 = 0x00020000
    ew 0x020e0758 = 0x00000000
    ew 0x020e0774 = 0x00020000
    ew 0x020e078c = 0x00000030
    ew 0x020e0798 = 0x000C0000

    // Disable MMDC power save mode
    ew 0x021b0404 = 0x00011007

    // MMDC configuration
    ew 0x021b081c = 0x33333333
    ew 0x021b0820 = 0x33333333
    ew 0x021b0824 = 0x33333333
    ew 0x021b0828 = 0x33333333
    ew 0x021b481c = 0x33333333
    ew 0x021b4820 = 0x33333333
    ew 0x021b4824 = 0x33333333
    ew 0x021b4828 = 0x33333333
    ew 0x021b0018 = 0x00081740
    ew 0x021b001c = 0x00008000
    ew 0x021b000c = 0x555A7975
    ew 0x021b0010 = 0xFF538E64
    ew 0x021b0014 = 0x01FF00DB
    ew 0x021b002c = 0x000026D2
    ew 0x021b0030 = 0x005B0E21
    ew 0x021b0008 = 0x09444040
    ew 0x021b0004 = 0x00025576
    ew 0x021b0040 = 0x00000027
    ew 0x021b0000 = 0x831A0000
    ew 0x021b001c = 0x04088032
    ew 0x021b001c = 0x0408803A
    ew 0x021b001c = 0x00008033
    ew 0x021b001c = 0x0000803B
    ew 0x021b001c = 0x00428031
    ew 0x021b001c = 0x00428039
    ew 0x021b001c = 0x09408030
    ew 0x021b001c = 0x09408038
    ew 0x021b001c = 0x04008040
    ew 0x021b001c = 0x04008048
    ew 0x021b0800 = 0xA1380003
    ew 0x021b4800 = 0xA1380003
    ew 0x021b0020 = 0x00005800
    ew 0x021b0818 = 0x00022227
    ew 0x021b4818 = 0x00022227
    ew 0x021b083c = 0x434B0350
    ew 0x021b0840 = 0x034C0359
    ew 0x021b483c = 0x434B0350
    ew 0x021b4840 = 0x03650348
    ew 0x021b0848 = 0x4436383B
    ew 0x021b4848 = 0x39393341
    ew 0x021b0850 = 0x35373933
    ew 0x021b4850 = 0x48254A36
    ew 0x021b080c = 0x001F001F
    ew 0x021b0810 = 0x001F001F
    ew 0x021b480c = 0x00440044
    ew 0x021b4810 = 0x00440044
    ew 0x021b08b8 = 0x00000800
    ew 0x021b48b8 = 0x00000800
    ew 0x021b001c = 0x00000000
    ew 0x021b0404 = 0x00011006

    w 10

    // CCM Clock gating registers configuration
    ew 0x020c4068 = 0x00C03F3F
    ew 0x020c406c = 0x0030FC03
    ew 0x020c4070 = 0x0FFFC000
    ew 0x020c4074 = 0x3FF00000
    ew 0x020c4078 = 0x00FFF300
    ew 0x020c407c = 0x0F0000C3
    ew 0x020c4080 = 0x000003FF
	
	//CCM Clock configuration to set timer frequency to 66MHz for EPIT
	ew 0x020c4014 = 0x00018D40
    ew 0x020c4018 = 0x00022324
    ew 0x020c401c = 0x00F00000
	
    //Invalidate L1 Cache
    ci

    // Invalidate L2 Cache by calling SMI monitor
    ew 100:da = 0xE3A0C001 //  mov   r12,#0x00000001
    ew 100:da = 0xE1600070 // SMC   #0

    // Disable L2 cache by clearing bit 2 in cp15 auxiliary control register
    ew $tempvar = @cp15_auxctl
    ew $tempvar2 = (@$tempvar & 0xFFFFFFFD)
    ew cp15_auxctl = @$tempvar2

    w 10

    dv "Initializing target done.\n"
    return

//___________________________________________________________________

// <eof>
