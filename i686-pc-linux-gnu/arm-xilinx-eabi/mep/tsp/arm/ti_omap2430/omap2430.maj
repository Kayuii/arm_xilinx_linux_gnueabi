+q  // Enter quiet mode
//___________________________________________________________________
//
//               Copyright (c) 2011 Mentor Graphics Corporation
//                           All rights reserved
//
//   THIS WORK CONTAINS TRADE SECRETS AND PROPRIETARY INFORMATION WHICH IS
//    THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS
//                        SUBJECT TO LICENSE TERMS.
//
//___________________________________________________________________
//
// Mentor Embedded Sourcery Probe target initialization file for the
// TI OMAP 2430 reference platform.  It supports this platform as-is,
// and can be adapted to a new target based on this reference board,
// as detailed below.  For a brand new custom board not related to
// this reference board, it may be better to start from the template
// rather than trying to adapt this file.
//
// Target Description:
//
//     Board:   TI SDP2430-VG5.0.1
//     Device:  TI OMAP 2430
//     CPU ID:  ARM1136JF
//     Endian:  Little
//     Cores:   1
//
// Porting Guide:
//
// The user should make the following adaptations to port this file
// to a new target board based on the associated reference platform:
//
//        0. Review the MEP Probe Initialization section at
//           "TO DO #0" below to make sure the settings are
//           right for your board.
//        1. Update the memory configuration table for changes
//           in the new board's  *Physical*  memory map.  See
//           'TO DO #1' below.
//        2. If your target board requires any special MEP
//           settings, they should be added to the end of the
//           ONE_TIME_SETUP section.  See 'TO DO #2' below.
//        3. Decide whether the target should be automatically
//           reset and/or initialized upon start-up by choosing
//           the desired command at 'TO DO #3' below.  This
//           really depends on your use case.
//        4. If the board has no boot code (or bad boot code),
//           and you want to download into RAM, then you may
//           have to adapt the memory controller initialization
//           script at 'TO DO #4' below to account for changes
//           relative to the reference platform.
//
// NOTE:  Additional information on MON commands and the configuration
//        options used here is available in the online help system.
//___________________________________________________________________
dv "Reading $$# ...\n"


// Initialization script preparation
// =================================

// The RTI, RTNI, and TI command aliases call script functions in this file.
// These command aliases should never be changed.

ea RTI   $$#.DO_RTI  // RTI  call DO_RTI script function  (Reset Target and Initialize)
ea RTNI  $$#.DO_RTNI // RTNI call DO_RTNI script function (Reset Target with No Initialization)
ea TI    $$#.DO_TI   // TI   call DO_TI script function   (Target Initialize without resetting)


// MEP Probe Initialization
// ==========================

// TO DO #0 -- Review the following MEP configuration options to make
//             sure they are right for your target board hardware and
//             processor device design.

// The  Trgt_Resets_JTAG  option informs the MEP probe whether the target
// board will forward a system reset (nSRST) to the JTAG interface (nTRST),
// or reset the system only without resetting the JTAG interface.  When in
// doubt, a YES setting is safer.  When the two reset circuits are known
// to be independent, which is strongly recommended, then a NO setting is
// recommended.

eo Trgt_Resets_JTAG  = yes

// The  Ice_JTAG_Use_RTCLK  and  Ice_JTAG_Clock_Freq  options are related
// and must be considered together.  An  Ice_JTAG_Use_RTCLK  setting of
// ON  selects adaptive clocking mode, where the JTAG clock is dynamically
// controlled by the target processor.  When  Ice_JTAG_Use_RTCLK  is set
// OFF  then normal (unthrottled) clocking is selected.
//
// When adaptive clocking is disabled, the  Ice_JTAG_Clock_Freq  option
// specifies the the JTAG clock (TCK) frequency in Megahertz, from
// 0.002 to 100 (depending on probe hardware capability).  A lower setting
// is safer, a higher setting yields higher performance.  Note that the
// requested frequency will be adjusted down to the closest frequency
// supported by the probe hardware (displaying this option will show the
// actual TCK frequency).
//
//     IJUR  Clock mode
//     ====  ========================
//     OFF   Free running TCK at specified frequency (RTCK is ignored)
//     ON    Adaptive clocking with frequency controlled by RTCK
//           (Ice_JTAG_Clock_Freq is ignored)
//
// Note that enabling  Ice_JTAG_Use_RTCLK  on target boards that do not
// drive the RTCK signal will lock up the JTAG interface.

eo Ice_JTAG_Use_RTCLK  = off
eo Ice_JTAG_Clock_Freq = 0.01   // start off slow then increase later
if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

// The following command can be used to define the details of the JTAG
// daisy chain.  It is only required for targets on which the MEP
// auto-detection algorithm cannot correctly determine the JTAG connection
// details.  On most boards this command can be omitted.
//
//    ew MEP_JTAG_DIMENSION = TAP_CNT, IR1_CNT [ , IR2_CNT ]  ...

// The following commands can be used to define special JTAG initialization
// operations required by certain processors.  The first one, if defined,
// is scanned in right after the JTAG reset cycle completes, but before the
// standard JTAG initialization performed by the MEP.  The second, if
// defined, is scanned in right after the standard JTAG initialization
// performed by the MEP.  On most boards these can both be omitted.
//
//    ew MEP_JTAG_INIT0 = <scan-op> [ , <scan-op> ]  ...
//    ew MEP_JTAG_INIT1 = <scan-op> [ , <scan-op> ]  ...

// The  Ice_Power_Sense  option enables the target power monitor.  When
// target power is detected, the debug interface is enabled.

eo Ice_Power_Sense = VREF

// The  Ice_JTAG_TAP_Select  option controls which TAP on a multi-TAP
// daisy chain is associated with this debug connection.  This option
// can be omitted on targets which have one TAP.  Note that TAPs are
// numbered from 1-N, with TAP 1 being the one whose TDO is connected
// to the MEP probe.
//
//    eo Ice_JTAG_TAP_Select = <num>

eo Ice_JTAG_TAP_Select = 2

// Target connection command
tc

// Physical Memory Configuration
// =============================

mc *:P, inv     // start with all *physical* memory (*:P) marked as invalid

// TO DO #1 -- Change the address range(s) below to match the  *physical*
//             address ranges of your ROM/flash and RAM areas.  Add more
//             MC commands as necessary for each memory mapped area.
//
// WARNING:  DO NOT confuse virtual (MVA) addresses with physical space.
//           Make sure to use physical addresses in the MC table.
//
// EXAMPLE:
//
//     mc  ________:P  ________:P,  PWE, JAM, RW    // DRAM
//     mc  ________:P  ________:P,  PWD, JAM, RO    // Flash or ROM
//     mc  ________:P  ________:P,  PWD, JAM, RW    // Peripheral registers
//
// Note that if your boot code remaps physical memory, then the MC table
// should reflect the mapping that is in effect for the code you are trying
// to debug.  When debugging boot code in flash, MC should match the mapping
// in effect when booting.  When debugging code in RAM, MC should match the
// mapping in effect when running code from RAM.
//
// Address Range          PWE  Access
// ---------------------- ---- -------
mc 00000000:P 03E8FFFF:P, PWD, JAM, RO  // Boot ROM/Flash
mc 49000000:P 497FFFFF:P, PWE, JAM, RW  // 
mc 6C000000:P 6CFFFFFF:P, PWE, JAM, RW  // SMS Registers
mc 6D000000:P 6DFFFFFF:P, PWE, JAM, RW  // SDRC Registers
mc 6E000000:P 6EFFFFFF:P, PWE, JAM, RW  // GPMC Registers
mc 80000000:P 87FFFFFF:P, PWE, JAM, RW  // DRAM

//        ____User Supplied Setup Commands Go Here____

// TO DO #2 -- If your target board requires any special MEP settings
//             (e.g. special JTAG initialization), add the commands to
//             make those settings here.


// End of initial one-time only setup script.  If this is a non-intrusive
// attach connection, or if a normal debug connection fails to connect
// properly, then exit at this point.  Otherwise continue on with optional
// additional initialization.

if (@.4$INIT_TYPE != 0) {dv "Non-intrusive attach connection\n"; goto EXIT}
if (@$trgt_cpu_state != $tcs.halt) {dv "Debug connection failed, "; doq TCS; goto EXIT}

// TO DO #3 -- Comment out all but one of the next three commands to
//             control IF and HOW the target is initialized when the
//             debugger is launched.  If no reset or target initialization
//             is needed then all these can be left commented out.

TI
//   RTI
//   RTNI

:EXIT
dv "Finished reading $$#.\n"
return

//___________________________________________________________________
::DO_RTNI  // Reset Target with No Initialization.

    // Normally an  rt  command is sufficient, but it may be necessary
    // to slow down the JTAG clock first, depending on the affect of
    // reset on the processor.

    dv "Executing RTNI script function\n"
    eo Ice_JTAG_Clock_Freq  = 0.01    // Slow down JTAG Clock before resetting target
    if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}
    rt
    return

//___________________________________________________________________
::DO_RTI   // Reset Target and Initialize.

    // Note that it may be necessary to slow down the JTAG clock first, 
    // depending on the affect of reset on the processor.

    dv "Executing RTI script function\n"
    eo Ice_JTAG_Clock_Freq  = 0.01    // Slow down JTAG Clock before resetting target
    if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}
    rt
    TI	// call script DO_TI function
    return

//___________________________________________________________________
::DO_TI  // Target Initialize.

    if (@$trgt_cpu_state != $tcs.halt) { dv "Target Initialization commands skipped due to CPU state\n"; doq TCS; return }
    dv "Initializing target...\n"

    // ********************************************
    // Watchdog disable
    // ********************************************
    // Make sure reset completed
    //
    ew $temp = @.40x49016014
    if ((@$temp & 1) == 0) {dv "\nOMAP device is stuck in reset, initialization aborted.\n"; goto EXIT}
    //
    //  Disable 32kHz watchdog timer
    //
    ew 0x49016048 = 0x0000AAAA
    //
    ew $temp = @.40x49016034
    if ((@$temp & 0x10) != 0) {dv "\nUnable to disable 32kHz watchdog timer, initialization aborted.\n"; goto EXIT}
    //
    ew 0x49016048 = 0x00005555
    //
    ew $temp = @.40x49016034
    if ((@$temp & 0x10) != 0) {dv "\nUnable to disable 32kHz watchdog timer, initialization aborted.\n"; goto EXIT}
    //
    //  Memory Controller Setup
    //
    // TO DO #4 -- If your board has a different memory configuration than
    //             the reference board, then you may need to adapt the
    //             memory controller initialization script accordingly.
    //             These settings should match the settings used by your
    //             boot code during its hardware initialization phase.
    //
    // ********************************************
    // Set clock
    // //File: omap2430_clock_config.gel
    // File: omap2430_arm11.gel (prcm_clocking_conf_5a())
    // ********************************************
    ew 0x49006500 = 0x00000001
    ew 0x49006060 = 0x00000080
    ew 0x49006140 = 0x00000002
    ew 0x49006240 = 0x04302546
    ew 0x49006244 = 0x00000000
    ew 0x49006340 = 0x00000002
    ew 0x49006840 = 0x00000062
    ew 0x49006C40 = 0x00000006
    ew 0x49006080 = 0x00000001
    ew 0x49006540 = 0x0114ac00
    ew 0x49006544 = 0x00000002
    ew 0x49006500 = 0x000000cf
    //
    //ew @temp = @.40x6d000060
    //if ((@$temp & 0xc) == 0xc) {dv "\nOK"}
    //ew @0x6d000060 = (@@6d000060) & (~(1<<2))
    //
    //ew @temp = @.40x6d000068
    //if ((@$temp & 0xc) == 0xc) {dv "\nOK"}
    //ew @0x6d000068 = (@@6d000068) & (~(1<<2))
    // 
    //
    // ********************************************
    // SDRAM Setup
    // File: sdrc_mddr_config_k4x5132_32.gel
    // File: omap2430sdp_infinion_ccs_3_2.gel
    // ********************************************
    // pin Muxing for SDRC (pad SDRC_A12, pull down, mode 0)
    eb 0x49002056 = 0x00
    // software reset of SDRAM IF
    ew 0x6d000010 = 0x0000000a
    ew 0x6d000010 = 0x00000008
    // SDRC Sharing reg
    ew 0x6d000044 = 0x00000100
    // SDRC_MCFG0 
    ew 0x6d000080 = 0x00d04011
    // SDRC_RFR_CTRL0
    ew 0x6d0000a4 = 0x0003de01
    // SDRC_ACTIM_CTRLA0
    ew 0x6d00009c = 0x5a9a4486
    // SDRC_ACTIM_CTRLB0
    ew 0x6d0000a0 = 0x00000010
    // Disable Power Down of CKE
    ew 0x6d000070 = 0x00000081
    // SDRC_Manual command
    ew 0x6d0000a8 = 0x00000000
    ew 0x6d0000a8 = 0x00000001
    ew 0x6d0000a8 = 0x00000002
    ew 0x6d0000a8 = 0x00000002
    // SDRC_MR0
    ew 0x6d000084 = 0x00000032
    // SDRC DLLA
    // Enable DLL, load counter with 115
    ew 0x6d000060 = 0x0000730e
    // Clear the Load DLL bit to use DLLA in lock mode
    ew 0x6d000060 = 0x0000730a
    // SDRC DLLB
    // Enable DLL, Load counter with 128
    ew 0x6d000068 = 0x0000730e
    // Clear the Load DLL bit to use DLLB in lock mode
    ew 0x6d000068 = 0x0000730a
    //
    // Set size of External Flash to 64MB
    ew 0x6E000078 = 0x00000c40
    // ******************************************
    // Setup GPMC Register
    // ******************************************
    // For L3 clock = 110MHz
    ew 0x6E000070 = 0x01131F1F
    // There should be a for loop here: for (i=0; i<4096; i++);  How can I implement?

    ew 0x6E000064 = 0x00151501
    // There should be a for loop here: for (i=0; i<4096; i++);
    ew 0x6E000068 = 0x00060602
    // There should be a for loop here: for (i=0; i<4096; i++);
    ew 0x6E00006C = 0x10081008

    eo ice_jtag_clock_freq = 25   // JTAG clock frequency (MHz)
    if (@$Ice_JTAG_Use_RTCLK) {doq Ice_JTAG_Use_RTCLK} {doq Ice_JTAG_Clock_Freq}

    dv "Initializing target done.\n"
    return

//___________________________________________________________________

// <eof>
